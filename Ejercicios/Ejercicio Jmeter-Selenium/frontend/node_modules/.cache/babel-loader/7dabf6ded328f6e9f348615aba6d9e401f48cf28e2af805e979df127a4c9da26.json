{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsStateSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from \"./gridColumnsSelector.js\";\nimport { GridSignature } from \"../../../constants/signature.js\";\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from \"../../core/pipeProcessing/index.js\";\nimport { EMPTY_PINNED_COLUMN_FIELDS } from \"./gridColumnsInterfaces.js\";\nimport { hydrateColumnsWidth, createColumnsState, COLUMNS_DIMENSION_PROPERTIES } from \"./gridColumnsUtils.js\";\nimport { GridPreferencePanelsValue } from \"../preferencesPanel/index.js\";\nimport { gridPivotActiveSelector } from \"../pivoting/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const columnsStateInitializer = (state, props, apiRef) => {\n  const columnsState = createColumnsState({\n    apiRef,\n    columnsToUpsert: props.columns,\n    initialState: props.initialState?.columns,\n    columnVisibilityModel: props.columnVisibilityModel ?? props.initialState?.columns?.columnVisibilityModel ?? {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState,\n    // In pro/premium, this part of the state is defined. We give it an empty but defined value\n    // for the community version.\n    pinnedColumns: state.pinnedColumns ?? EMPTY_PINNED_COLUMN_FIELDS\n  });\n};\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\nexport function useGridColumns(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useGridColumns');\n  const previousColumnsProp = React.useRef(props.columns);\n  apiRef.current.registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n  }, [logger, apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const getColumn = React.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback((field, useVisibleColumns = true) => {\n    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = gridColumnVisibilityModelSelector(apiRef);\n    if (currentModel !== model) {\n      apiRef.current.setState(state => _extends({}, state, {\n        columns: createColumnsState({\n          apiRef,\n          columnsToUpsert: [],\n          initialState: undefined,\n          columnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      apiRef.current.updateRenderContext?.();\n    }\n  }, [apiRef]);\n  const updateColumns = React.useCallback(columns => {\n    if (gridPivotActiveSelector(apiRef)) {\n      apiRef.current.updateNonPivotColumns(columns);\n      return;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false,\n      updateInitialVisibilityModel: true\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n    const isCurrentlyVisible = columnVisibilityModel[field] ?? true;\n    if (isVisible !== isCurrentlyVisible) {\n      const newModel = _extends({}, columnVisibilityModel, {\n        [field]: isVisible\n      });\n      apiRef.current.setColumnVisibilityModel(newModel);\n    }\n  }, [apiRef]);\n  const getColumnIndexRelativeToVisibleColumns = React.useCallback(field => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    return allColumns.findIndex(col => col === field);\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);\n    const updatedColumns = [...allColumns];\n    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState(_extends({}, gridColumnsStateSelector(apiRef), {\n      orderedFields: updatedColumns\n    }));\n    const params = {\n      column: apiRef.current.getColumn(field),\n      targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnIndexChange', params);\n  }, [apiRef, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(`Updating column ${field} width to ${width}`);\n    const columnsState = gridColumnsStateSelector(apiRef);\n    const column = columnsState.lookup[field];\n    const newColumn = _extends({}, column, {\n      width,\n      hasBeenResized: true\n    });\n    setGridColumnsState(hydrateColumnsWidth(_extends({}, columnsState, {\n      lookup: _extends({}, columnsState.lookup, {\n        [field]: newColumn\n      })\n    }), apiRef.current.getRootDimensions()));\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger, setGridColumnsState]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnIndexRelativeToVisibleColumns,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnWidth\n  };\n  const columnReorderApi = {\n    setColumnIndex\n  };\n  useGridApiMethod(apiRef, columnApi, 'public');\n  useGridApiMethod(apiRef, columnReorderApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const columnsStateToExport = {};\n    const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n    const shouldExportColumnVisibilityModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.columnVisibilityModel != null ||\n    // Always export if the model has been initialized\n    // TODO v6 Do a nullish check instead to export even if the initial model equals \"{}\"\n    Object.keys(props.initialState?.columns?.columnVisibilityModel ?? {}).length > 0 ||\n    // Always export if the model is not empty\n    Object.keys(columnVisibilityModelToExport).length > 0;\n    if (shouldExportColumnVisibilityModel) {\n      columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n    }\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, props.columnVisibilityModel, props.initialState?.columns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const columnVisibilityModelToImport = context.stateToRestore.columns?.columnVisibilityModel;\n    const initialState = context.stateToRestore.columns;\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: [],\n      initialState,\n      columnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    }\n    return params;\n  }, [apiRef]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.columns) {\n      const ColumnsPanel = props.slots.columnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, props.slotProps?.columnsPanel));\n    }\n    return initialValue;\n  }, [props.slots.columnsPanel, props.slotProps?.columnsPanel]);\n  const addColumnMenuItems = React.useCallback(columnMenuItems => {\n    const isPivotActive = gridPivotActiveSelector(apiRef);\n    if (props.disableColumnSelector || isPivotActive) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuColumnsItem'];\n  }, [props.disableColumnSelector, apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItems);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n\n  /*\n   * EVENTS\n   */\n\n  const prevInnerWidth = React.useRef(null);\n  const handleGridSizeChange = size => {\n    if (prevInnerWidth.current !== size.width) {\n      prevInnerWidth.current = size.width;\n      const hasFlexColumns = gridVisibleColumnDefinitionsSelector(apiRef).some(col => col.flex && col.flex > 0);\n      if (!hasFlexColumns) {\n        return;\n      }\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef), apiRef.current.getRootDimensions()));\n    }\n  };\n  useGridEvent(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n\n  /**\n   * APPLIERS\n   */\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(`Columns pipe processing have changed, regenerating the columns`);\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: [],\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n\n  /*\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    logger.info(`GridColumns have changed, new length ${props.columns.length}`);\n    if (previousColumnsProp.current === props.columns) {\n      return;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true,\n      updateInitialVisibilityModel: true\n    });\n    previousColumnsProp.current = props.columns;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}\nfunction mergeColumnsState(columnsState) {\n  return state => _extends({}, state, {\n    columns: columnsState\n  });\n}","map":{"version":3,"names":["_extends","React","useGridApiMethod","useGridLogger","gridColumnFieldsSelector","gridColumnDefinitionsSelector","gridColumnLookupSelector","gridColumnsStateSelector","gridColumnVisibilityModelSelector","gridVisibleColumnDefinitionsSelector","gridColumnPositionsSelector","GridSignature","useGridEvent","useGridRegisterPipeProcessor","useGridRegisterPipeApplier","EMPTY_PINNED_COLUMN_FIELDS","hydrateColumnsWidth","createColumnsState","COLUMNS_DIMENSION_PROPERTIES","GridPreferencePanelsValue","gridPivotActiveSelector","jsx","_jsx","columnsStateInitializer","state","props","apiRef","columnsState","columnsToUpsert","columns","initialState","columnVisibilityModel","keepOnlyColumnsToUpsert","pinnedColumns","useGridColumns","logger","previousColumnsProp","useRef","current","registerControlState","stateId","propModel","propOnChange","onColumnVisibilityModelChange","stateSelector","changeEvent","setGridColumnsState","useCallback","debug","setState","mergeColumnsState","publishEvent","orderedFields","getColumn","field","getAllColumns","getVisibleColumns","getColumnIndex","useVisibleColumns","findIndex","col","getColumnPosition","index","setColumnVisibilityModel","model","currentModel","undefined","updateRenderContext","updateColumns","updateNonPivotColumns","updateInitialVisibilityModel","setColumnVisibility","isVisible","isCurrentlyVisible","newModel","getColumnIndexRelativeToVisibleColumns","allColumns","setColumnIndex","targetIndexPosition","oldIndexPosition","updatedColumns","fieldRemoved","splice","params","column","targetIndex","oldIndex","setColumnWidth","width","lookup","newColumn","hasBeenResized","getRootDimensions","element","getColumnHeaderElement","colDef","columnApi","columnReorderApi","signature","DataGrid","stateExportPreProcessing","prevState","context","columnsStateToExport","columnVisibilityModelToExport","shouldExportColumnVisibilityModel","exportOnlyDirtyModels","Object","keys","length","dimensions","forEach","colDefDimensions","propertyName","propertyValue","Infinity","stateRestorePreProcessing","columnVisibilityModelToImport","stateToRestore","preferencePanelPreProcessing","initialValue","value","ColumnsPanel","slots","columnsPanel","slotProps","addColumnMenuItems","columnMenuItems","isPivotActive","disableColumnSelector","prevInnerWidth","handleGridSizeChange","size","hasFlexColumns","some","flex","hydrateColumns","info","isFirstRender","useEffect"],"sources":["D:/2025/Calidad de Software/calidadMACG/Ejercicios/Ejercicio Jmeter-Selenium/frontend/node_modules/@mui/x-data-grid/esm/hooks/features/columns/useGridColumns.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsStateSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from \"./gridColumnsSelector.js\";\nimport { GridSignature } from \"../../../constants/signature.js\";\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from \"../../core/pipeProcessing/index.js\";\nimport { EMPTY_PINNED_COLUMN_FIELDS } from \"./gridColumnsInterfaces.js\";\nimport { hydrateColumnsWidth, createColumnsState, COLUMNS_DIMENSION_PROPERTIES } from \"./gridColumnsUtils.js\";\nimport { GridPreferencePanelsValue } from \"../preferencesPanel/index.js\";\nimport { gridPivotActiveSelector } from \"../pivoting/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const columnsStateInitializer = (state, props, apiRef) => {\n  const columnsState = createColumnsState({\n    apiRef,\n    columnsToUpsert: props.columns,\n    initialState: props.initialState?.columns,\n    columnVisibilityModel: props.columnVisibilityModel ?? props.initialState?.columns?.columnVisibilityModel ?? {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState,\n    // In pro/premium, this part of the state is defined. We give it an empty but defined value\n    // for the community version.\n    pinnedColumns: state.pinnedColumns ?? EMPTY_PINNED_COLUMN_FIELDS\n  });\n};\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\nexport function useGridColumns(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useGridColumns');\n  const previousColumnsProp = React.useRef(props.columns);\n  apiRef.current.registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n  }, [logger, apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const getColumn = React.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback((field, useVisibleColumns = true) => {\n    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = gridColumnVisibilityModelSelector(apiRef);\n    if (currentModel !== model) {\n      apiRef.current.setState(state => _extends({}, state, {\n        columns: createColumnsState({\n          apiRef,\n          columnsToUpsert: [],\n          initialState: undefined,\n          columnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      apiRef.current.updateRenderContext?.();\n    }\n  }, [apiRef]);\n  const updateColumns = React.useCallback(columns => {\n    if (gridPivotActiveSelector(apiRef)) {\n      apiRef.current.updateNonPivotColumns(columns);\n      return;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false,\n      updateInitialVisibilityModel: true\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n    const isCurrentlyVisible = columnVisibilityModel[field] ?? true;\n    if (isVisible !== isCurrentlyVisible) {\n      const newModel = _extends({}, columnVisibilityModel, {\n        [field]: isVisible\n      });\n      apiRef.current.setColumnVisibilityModel(newModel);\n    }\n  }, [apiRef]);\n  const getColumnIndexRelativeToVisibleColumns = React.useCallback(field => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    return allColumns.findIndex(col => col === field);\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);\n    const updatedColumns = [...allColumns];\n    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState(_extends({}, gridColumnsStateSelector(apiRef), {\n      orderedFields: updatedColumns\n    }));\n    const params = {\n      column: apiRef.current.getColumn(field),\n      targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnIndexChange', params);\n  }, [apiRef, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(`Updating column ${field} width to ${width}`);\n    const columnsState = gridColumnsStateSelector(apiRef);\n    const column = columnsState.lookup[field];\n    const newColumn = _extends({}, column, {\n      width,\n      hasBeenResized: true\n    });\n    setGridColumnsState(hydrateColumnsWidth(_extends({}, columnsState, {\n      lookup: _extends({}, columnsState.lookup, {\n        [field]: newColumn\n      })\n    }), apiRef.current.getRootDimensions()));\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger, setGridColumnsState]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnIndexRelativeToVisibleColumns,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnWidth\n  };\n  const columnReorderApi = {\n    setColumnIndex\n  };\n  useGridApiMethod(apiRef, columnApi, 'public');\n  useGridApiMethod(apiRef, columnReorderApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const columnsStateToExport = {};\n    const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n    const shouldExportColumnVisibilityModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.columnVisibilityModel != null ||\n    // Always export if the model has been initialized\n    // TODO v6 Do a nullish check instead to export even if the initial model equals \"{}\"\n    Object.keys(props.initialState?.columns?.columnVisibilityModel ?? {}).length > 0 ||\n    // Always export if the model is not empty\n    Object.keys(columnVisibilityModelToExport).length > 0;\n    if (shouldExportColumnVisibilityModel) {\n      columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n    }\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, props.columnVisibilityModel, props.initialState?.columns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const columnVisibilityModelToImport = context.stateToRestore.columns?.columnVisibilityModel;\n    const initialState = context.stateToRestore.columns;\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: [],\n      initialState,\n      columnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    }\n    return params;\n  }, [apiRef]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.columns) {\n      const ColumnsPanel = props.slots.columnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, props.slotProps?.columnsPanel));\n    }\n    return initialValue;\n  }, [props.slots.columnsPanel, props.slotProps?.columnsPanel]);\n  const addColumnMenuItems = React.useCallback(columnMenuItems => {\n    const isPivotActive = gridPivotActiveSelector(apiRef);\n    if (props.disableColumnSelector || isPivotActive) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuColumnsItem'];\n  }, [props.disableColumnSelector, apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItems);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n\n  /*\n   * EVENTS\n   */\n\n  const prevInnerWidth = React.useRef(null);\n  const handleGridSizeChange = size => {\n    if (prevInnerWidth.current !== size.width) {\n      prevInnerWidth.current = size.width;\n      const hasFlexColumns = gridVisibleColumnDefinitionsSelector(apiRef).some(col => col.flex && col.flex > 0);\n      if (!hasFlexColumns) {\n        return;\n      }\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef), apiRef.current.getRootDimensions()));\n    }\n  };\n  useGridEvent(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n\n  /**\n   * APPLIERS\n   */\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(`Columns pipe processing have changed, regenerating the columns`);\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: [],\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n\n  /*\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    logger.info(`GridColumns have changed, new length ${props.columns.length}`);\n    if (previousColumnsProp.current === props.columns) {\n      return;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true,\n      updateInitialVisibilityModel: true\n    });\n    previousColumnsProp.current = props.columns;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}\nfunction mergeColumnsState(columnsState) {\n  return state => _extends({}, state, {\n    columns: columnsState\n  });\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,gBAAgB,QAAQ,iCAAiC;AAClE,SAASC,aAAa,QAAQ,8BAA8B;AAC5D,SAASC,wBAAwB,EAAEC,6BAA6B,EAAEC,wBAAwB,EAAEC,wBAAwB,EAAEC,iCAAiC,EAAEC,oCAAoC,EAAEC,2BAA2B,QAAQ,0BAA0B;AAC5P,SAASC,aAAa,QAAQ,iCAAiC;AAC/D,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,SAASC,4BAA4B,EAAEC,0BAA0B,QAAQ,oCAAoC;AAC7G,SAASC,0BAA0B,QAAQ,4BAA4B;AACvE,SAASC,mBAAmB,EAAEC,kBAAkB,EAAEC,4BAA4B,QAAQ,uBAAuB;AAC7G,SAASC,yBAAyB,QAAQ,8BAA8B;AACxE,SAASC,uBAAuB,QAAQ,sBAAsB;AAC9D,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,OAAO,MAAMC,uBAAuB,GAAGA,CAACC,KAAK,EAAEC,KAAK,EAAEC,MAAM,KAAK;EAC/D,MAAMC,YAAY,GAAGV,kBAAkB,CAAC;IACtCS,MAAM;IACNE,eAAe,EAAEH,KAAK,CAACI,OAAO;IAC9BC,YAAY,EAAEL,KAAK,CAACK,YAAY,EAAED,OAAO;IACzCE,qBAAqB,EAAEN,KAAK,CAACM,qBAAqB,IAAIN,KAAK,CAACK,YAAY,EAAED,OAAO,EAAEE,qBAAqB,IAAI,CAAC,CAAC;IAC9GC,uBAAuB,EAAE;EAC3B,CAAC,CAAC;EACF,OAAOhC,QAAQ,CAAC,CAAC,CAAC,EAAEwB,KAAK,EAAE;IACzBK,OAAO,EAAEF,YAAY;IACrB;IACA;IACAM,aAAa,EAAET,KAAK,CAACS,aAAa,IAAIlB;EACxC,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,SAASmB,cAAcA,CAACR,MAAM,EAAED,KAAK,EAAE;EAC5C,MAAMU,MAAM,GAAGhC,aAAa,CAACuB,MAAM,EAAE,gBAAgB,CAAC;EACtD,MAAMU,mBAAmB,GAAGnC,KAAK,CAACoC,MAAM,CAACZ,KAAK,CAACI,OAAO,CAAC;EACvDH,MAAM,CAACY,OAAO,CAACC,oBAAoB,CAAC;IAClCC,OAAO,EAAE,gBAAgB;IACzBC,SAAS,EAAEhB,KAAK,CAACM,qBAAqB;IACtCW,YAAY,EAAEjB,KAAK,CAACkB,6BAA6B;IACjDC,aAAa,EAAEpC,iCAAiC;IAChDqC,WAAW,EAAE;EACf,CAAC,CAAC;EACF,MAAMC,mBAAmB,GAAG7C,KAAK,CAAC8C,WAAW,CAACpB,YAAY,IAAI;IAC5DQ,MAAM,CAACa,KAAK,CAAC,yBAAyB,CAAC;IACvCtB,MAAM,CAACY,OAAO,CAACW,QAAQ,CAACC,iBAAiB,CAACvB,YAAY,CAAC,CAAC;IACxDD,MAAM,CAACY,OAAO,CAACa,YAAY,CAAC,eAAe,EAAExB,YAAY,CAACyB,aAAa,CAAC;EAC1E,CAAC,EAAE,CAACjB,MAAM,EAAET,MAAM,CAAC,CAAC;;EAEpB;AACF;AACA;EACE,MAAM2B,SAAS,GAAGpD,KAAK,CAAC8C,WAAW,CAACO,KAAK,IAAIhD,wBAAwB,CAACoB,MAAM,CAAC,CAAC4B,KAAK,CAAC,EAAE,CAAC5B,MAAM,CAAC,CAAC;EAC/F,MAAM6B,aAAa,GAAGtD,KAAK,CAAC8C,WAAW,CAAC,MAAM1C,6BAA6B,CAACqB,MAAM,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAC9F,MAAM8B,iBAAiB,GAAGvD,KAAK,CAAC8C,WAAW,CAAC,MAAMtC,oCAAoC,CAACiB,MAAM,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EACzG,MAAM+B,cAAc,GAAGxD,KAAK,CAAC8C,WAAW,CAAC,CAACO,KAAK,EAAEI,iBAAiB,GAAG,IAAI,KAAK;IAC5E,MAAM7B,OAAO,GAAG6B,iBAAiB,GAAGjD,oCAAoC,CAACiB,MAAM,CAAC,GAAGrB,6BAA6B,CAACqB,MAAM,CAAC;IACxH,OAAOG,OAAO,CAAC8B,SAAS,CAACC,GAAG,IAAIA,GAAG,CAACN,KAAK,KAAKA,KAAK,CAAC;EACtD,CAAC,EAAE,CAAC5B,MAAM,CAAC,CAAC;EACZ,MAAMmC,iBAAiB,GAAG5D,KAAK,CAAC8C,WAAW,CAACO,KAAK,IAAI;IACnD,MAAMQ,KAAK,GAAGL,cAAc,CAACH,KAAK,CAAC;IACnC,OAAO5C,2BAA2B,CAACgB,MAAM,CAAC,CAACoC,KAAK,CAAC;EACnD,CAAC,EAAE,CAACpC,MAAM,EAAE+B,cAAc,CAAC,CAAC;EAC5B,MAAMM,wBAAwB,GAAG9D,KAAK,CAAC8C,WAAW,CAACiB,KAAK,IAAI;IAC1D,MAAMC,YAAY,GAAGzD,iCAAiC,CAACkB,MAAM,CAAC;IAC9D,IAAIuC,YAAY,KAAKD,KAAK,EAAE;MAC1BtC,MAAM,CAACY,OAAO,CAACW,QAAQ,CAACzB,KAAK,IAAIxB,QAAQ,CAAC,CAAC,CAAC,EAAEwB,KAAK,EAAE;QACnDK,OAAO,EAAEZ,kBAAkB,CAAC;UAC1BS,MAAM;UACNE,eAAe,EAAE,EAAE;UACnBE,YAAY,EAAEoC,SAAS;UACvBnC,qBAAqB,EAAEiC,KAAK;UAC5BhC,uBAAuB,EAAE;QAC3B,CAAC;MACH,CAAC,CAAC,CAAC;MACHN,MAAM,CAACY,OAAO,CAAC6B,mBAAmB,GAAG,CAAC;IACxC;EACF,CAAC,EAAE,CAACzC,MAAM,CAAC,CAAC;EACZ,MAAM0C,aAAa,GAAGnE,KAAK,CAAC8C,WAAW,CAAClB,OAAO,IAAI;IACjD,IAAIT,uBAAuB,CAACM,MAAM,CAAC,EAAE;MACnCA,MAAM,CAACY,OAAO,CAAC+B,qBAAqB,CAACxC,OAAO,CAAC;MAC7C;IACF;IACA,MAAMF,YAAY,GAAGV,kBAAkB,CAAC;MACtCS,MAAM;MACNE,eAAe,EAAEC,OAAO;MACxBC,YAAY,EAAEoC,SAAS;MACvBlC,uBAAuB,EAAE,KAAK;MAC9BsC,4BAA4B,EAAE;IAChC,CAAC,CAAC;IACFxB,mBAAmB,CAACnB,YAAY,CAAC;EACnC,CAAC,EAAE,CAACD,MAAM,EAAEoB,mBAAmB,CAAC,CAAC;EACjC,MAAMyB,mBAAmB,GAAGtE,KAAK,CAAC8C,WAAW,CAAC,CAACO,KAAK,EAAEkB,SAAS,KAAK;IAClE,MAAMzC,qBAAqB,GAAGvB,iCAAiC,CAACkB,MAAM,CAAC;IACvE,MAAM+C,kBAAkB,GAAG1C,qBAAqB,CAACuB,KAAK,CAAC,IAAI,IAAI;IAC/D,IAAIkB,SAAS,KAAKC,kBAAkB,EAAE;MACpC,MAAMC,QAAQ,GAAG1E,QAAQ,CAAC,CAAC,CAAC,EAAE+B,qBAAqB,EAAE;QACnD,CAACuB,KAAK,GAAGkB;MACX,CAAC,CAAC;MACF9C,MAAM,CAACY,OAAO,CAACyB,wBAAwB,CAACW,QAAQ,CAAC;IACnD;EACF,CAAC,EAAE,CAAChD,MAAM,CAAC,CAAC;EACZ,MAAMiD,sCAAsC,GAAG1E,KAAK,CAAC8C,WAAW,CAACO,KAAK,IAAI;IACxE,MAAMsB,UAAU,GAAGxE,wBAAwB,CAACsB,MAAM,CAAC;IACnD,OAAOkD,UAAU,CAACjB,SAAS,CAACC,GAAG,IAAIA,GAAG,KAAKN,KAAK,CAAC;EACnD,CAAC,EAAE,CAAC5B,MAAM,CAAC,CAAC;EACZ,MAAMmD,cAAc,GAAG5E,KAAK,CAAC8C,WAAW,CAAC,CAACO,KAAK,EAAEwB,mBAAmB,KAAK;IACvE,MAAMF,UAAU,GAAGxE,wBAAwB,CAACsB,MAAM,CAAC;IACnD,MAAMqD,gBAAgB,GAAGJ,sCAAsC,CAACrB,KAAK,CAAC;IACtE,IAAIyB,gBAAgB,KAAKD,mBAAmB,EAAE;MAC5C;IACF;IACA3C,MAAM,CAACa,KAAK,CAAC,iBAAiBM,KAAK,aAAawB,mBAAmB,EAAE,CAAC;IACtE,MAAME,cAAc,GAAG,CAAC,GAAGJ,UAAU,CAAC;IACtC,MAAMK,YAAY,GAAGD,cAAc,CAACE,MAAM,CAACH,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAClEC,cAAc,CAACE,MAAM,CAACJ,mBAAmB,EAAE,CAAC,EAAEG,YAAY,CAAC;IAC3DnC,mBAAmB,CAAC9C,QAAQ,CAAC,CAAC,CAAC,EAAEO,wBAAwB,CAACmB,MAAM,CAAC,EAAE;MACjE0B,aAAa,EAAE4B;IACjB,CAAC,CAAC,CAAC;IACH,MAAMG,MAAM,GAAG;MACbC,MAAM,EAAE1D,MAAM,CAACY,OAAO,CAACe,SAAS,CAACC,KAAK,CAAC;MACvC+B,WAAW,EAAE3D,MAAM,CAACY,OAAO,CAACqC,sCAAsC,CAACrB,KAAK,CAAC;MACzEgC,QAAQ,EAAEP;IACZ,CAAC;IACDrD,MAAM,CAACY,OAAO,CAACa,YAAY,CAAC,mBAAmB,EAAEgC,MAAM,CAAC;EAC1D,CAAC,EAAE,CAACzD,MAAM,EAAES,MAAM,EAAEW,mBAAmB,EAAE6B,sCAAsC,CAAC,CAAC;EACjF,MAAMY,cAAc,GAAGtF,KAAK,CAAC8C,WAAW,CAAC,CAACO,KAAK,EAAEkC,KAAK,KAAK;IACzDrD,MAAM,CAACa,KAAK,CAAC,mBAAmBM,KAAK,aAAakC,KAAK,EAAE,CAAC;IAC1D,MAAM7D,YAAY,GAAGpB,wBAAwB,CAACmB,MAAM,CAAC;IACrD,MAAM0D,MAAM,GAAGzD,YAAY,CAAC8D,MAAM,CAACnC,KAAK,CAAC;IACzC,MAAMoC,SAAS,GAAG1F,QAAQ,CAAC,CAAC,CAAC,EAAEoF,MAAM,EAAE;MACrCI,KAAK;MACLG,cAAc,EAAE;IAClB,CAAC,CAAC;IACF7C,mBAAmB,CAAC9B,mBAAmB,CAAChB,QAAQ,CAAC,CAAC,CAAC,EAAE2B,YAAY,EAAE;MACjE8D,MAAM,EAAEzF,QAAQ,CAAC,CAAC,CAAC,EAAE2B,YAAY,CAAC8D,MAAM,EAAE;QACxC,CAACnC,KAAK,GAAGoC;MACX,CAAC;IACH,CAAC,CAAC,EAAEhE,MAAM,CAACY,OAAO,CAACsD,iBAAiB,CAAC,CAAC,CAAC,CAAC;IACxClE,MAAM,CAACY,OAAO,CAACa,YAAY,CAAC,mBAAmB,EAAE;MAC/C0C,OAAO,EAAEnE,MAAM,CAACY,OAAO,CAACwD,sBAAsB,CAACxC,KAAK,CAAC;MACrDyC,MAAM,EAAEL,SAAS;MACjBF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC9D,MAAM,EAAES,MAAM,EAAEW,mBAAmB,CAAC,CAAC;EACzC,MAAMkD,SAAS,GAAG;IAChB3C,SAAS;IACTE,aAAa;IACbE,cAAc;IACdI,iBAAiB;IACjBL,iBAAiB;IACjBmB,sCAAsC;IACtCP,aAAa;IACbL,wBAAwB;IACxBQ,mBAAmB;IACnBgB;EACF,CAAC;EACD,MAAMU,gBAAgB,GAAG;IACvBpB;EACF,CAAC;EACD3E,gBAAgB,CAACwB,MAAM,EAAEsE,SAAS,EAAE,QAAQ,CAAC;EAC7C9F,gBAAgB,CAACwB,MAAM,EAAEuE,gBAAgB,EAAExE,KAAK,CAACyE,SAAS,KAAKvF,aAAa,CAACwF,QAAQ,GAAG,SAAS,GAAG,QAAQ,CAAC;;EAE7G;AACF;AACA;EACE,MAAMC,wBAAwB,GAAGnG,KAAK,CAAC8C,WAAW,CAAC,CAACsD,SAAS,EAAEC,OAAO,KAAK;IACzE,MAAMC,oBAAoB,GAAG,CAAC,CAAC;IAC/B,MAAMC,6BAA6B,GAAGhG,iCAAiC,CAACkB,MAAM,CAAC;IAC/E,MAAM+E,iCAAiC;IACvC;IACA,CAACH,OAAO,CAACI,qBAAqB;IAC9B;IACAjF,KAAK,CAACM,qBAAqB,IAAI,IAAI;IACnC;IACA;IACA4E,MAAM,CAACC,IAAI,CAACnF,KAAK,CAACK,YAAY,EAAED,OAAO,EAAEE,qBAAqB,IAAI,CAAC,CAAC,CAAC,CAAC8E,MAAM,GAAG,CAAC;IAChF;IACAF,MAAM,CAACC,IAAI,CAACJ,6BAA6B,CAAC,CAACK,MAAM,GAAG,CAAC;IACrD,IAAIJ,iCAAiC,EAAE;MACrCF,oBAAoB,CAACxE,qBAAqB,GAAGyE,6BAA6B;IAC5E;IACAD,oBAAoB,CAACnD,aAAa,GAAGhD,wBAAwB,CAACsB,MAAM,CAAC;IACrE,MAAMG,OAAO,GAAGxB,6BAA6B,CAACqB,MAAM,CAAC;IACrD,MAAMoF,UAAU,GAAG,CAAC,CAAC;IACrBjF,OAAO,CAACkF,OAAO,CAAChB,MAAM,IAAI;MACxB,IAAIA,MAAM,CAACJ,cAAc,EAAE;QACzB,MAAMqB,gBAAgB,GAAG,CAAC,CAAC;QAC3B9F,4BAA4B,CAAC6F,OAAO,CAACE,YAAY,IAAI;UACnD,IAAIC,aAAa,GAAGnB,MAAM,CAACkB,YAAY,CAAC;UACxC,IAAIC,aAAa,KAAKC,QAAQ,EAAE;YAC9BD,aAAa,GAAG,CAAC,CAAC;UACpB;UACAF,gBAAgB,CAACC,YAAY,CAAC,GAAGC,aAAa;QAChD,CAAC,CAAC;QACFJ,UAAU,CAACf,MAAM,CAACzC,KAAK,CAAC,GAAG0D,gBAAgB;MAC7C;IACF,CAAC,CAAC;IACF,IAAIL,MAAM,CAACC,IAAI,CAACE,UAAU,CAAC,CAACD,MAAM,GAAG,CAAC,EAAE;MACtCN,oBAAoB,CAACO,UAAU,GAAGA,UAAU;IAC9C;IACA,OAAO9G,QAAQ,CAAC,CAAC,CAAC,EAAEqG,SAAS,EAAE;MAC7BxE,OAAO,EAAE0E;IACX,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC7E,MAAM,EAAED,KAAK,CAACM,qBAAqB,EAAEN,KAAK,CAACK,YAAY,EAAED,OAAO,CAAC,CAAC;EACtE,MAAMuF,yBAAyB,GAAGnH,KAAK,CAAC8C,WAAW,CAAC,CAACoC,MAAM,EAAEmB,OAAO,KAAK;IACvE,MAAMe,6BAA6B,GAAGf,OAAO,CAACgB,cAAc,CAACzF,OAAO,EAAEE,qBAAqB;IAC3F,MAAMD,YAAY,GAAGwE,OAAO,CAACgB,cAAc,CAACzF,OAAO;IACnD,IAAIwF,6BAA6B,IAAI,IAAI,IAAIvF,YAAY,IAAI,IAAI,EAAE;MACjE,OAAOqD,MAAM;IACf;IACA,MAAMxD,YAAY,GAAGV,kBAAkB,CAAC;MACtCS,MAAM;MACNE,eAAe,EAAE,EAAE;MACnBE,YAAY;MACZC,qBAAqB,EAAEsF,6BAA6B;MACpDrF,uBAAuB,EAAE;IAC3B,CAAC,CAAC;IACFN,MAAM,CAACY,OAAO,CAACW,QAAQ,CAACC,iBAAiB,CAACvB,YAAY,CAAC,CAAC;IACxD,IAAIG,YAAY,IAAI,IAAI,EAAE;MACxBJ,MAAM,CAACY,OAAO,CAACa,YAAY,CAAC,eAAe,EAAExB,YAAY,CAACyB,aAAa,CAAC;IAC1E;IACA,OAAO+B,MAAM;EACf,CAAC,EAAE,CAACzD,MAAM,CAAC,CAAC;EACZ,MAAM6F,4BAA4B,GAAGtH,KAAK,CAAC8C,WAAW,CAAC,CAACyE,YAAY,EAAEC,KAAK,KAAK;IAC9E,IAAIA,KAAK,KAAKtG,yBAAyB,CAACU,OAAO,EAAE;MAC/C,MAAM6F,YAAY,GAAGjG,KAAK,CAACkG,KAAK,CAACC,YAAY;MAC7C,OAAO,aAAatG,IAAI,CAACoG,YAAY,EAAE1H,QAAQ,CAAC,CAAC,CAAC,EAAEyB,KAAK,CAACoG,SAAS,EAAED,YAAY,CAAC,CAAC;IACrF;IACA,OAAOJ,YAAY;EACrB,CAAC,EAAE,CAAC/F,KAAK,CAACkG,KAAK,CAACC,YAAY,EAAEnG,KAAK,CAACoG,SAAS,EAAED,YAAY,CAAC,CAAC;EAC7D,MAAME,kBAAkB,GAAG7H,KAAK,CAAC8C,WAAW,CAACgF,eAAe,IAAI;IAC9D,MAAMC,aAAa,GAAG5G,uBAAuB,CAACM,MAAM,CAAC;IACrD,IAAID,KAAK,CAACwG,qBAAqB,IAAID,aAAa,EAAE;MAChD,OAAOD,eAAe;IACxB;IACA,OAAO,CAAC,GAAGA,eAAe,EAAE,uBAAuB,CAAC;EACtD,CAAC,EAAE,CAACtG,KAAK,CAACwG,qBAAqB,EAAEvG,MAAM,CAAC,CAAC;EACzCb,4BAA4B,CAACa,MAAM,EAAE,YAAY,EAAEoG,kBAAkB,CAAC;EACtEjH,4BAA4B,CAACa,MAAM,EAAE,aAAa,EAAE0E,wBAAwB,CAAC;EAC7EvF,4BAA4B,CAACa,MAAM,EAAE,cAAc,EAAE0F,yBAAyB,CAAC;EAC/EvG,4BAA4B,CAACa,MAAM,EAAE,iBAAiB,EAAE6F,4BAA4B,CAAC;;EAErF;AACF;AACA;;EAEE,MAAMW,cAAc,GAAGjI,KAAK,CAACoC,MAAM,CAAC,IAAI,CAAC;EACzC,MAAM8F,oBAAoB,GAAGC,IAAI,IAAI;IACnC,IAAIF,cAAc,CAAC5F,OAAO,KAAK8F,IAAI,CAAC5C,KAAK,EAAE;MACzC0C,cAAc,CAAC5F,OAAO,GAAG8F,IAAI,CAAC5C,KAAK;MACnC,MAAM6C,cAAc,GAAG5H,oCAAoC,CAACiB,MAAM,CAAC,CAAC4G,IAAI,CAAC1E,GAAG,IAAIA,GAAG,CAAC2E,IAAI,IAAI3E,GAAG,CAAC2E,IAAI,GAAG,CAAC,CAAC;MACzG,IAAI,CAACF,cAAc,EAAE;QACnB;MACF;MACAvF,mBAAmB,CAAC9B,mBAAmB,CAACT,wBAAwB,CAACmB,MAAM,CAAC,EAAEA,MAAM,CAACY,OAAO,CAACsD,iBAAiB,CAAC,CAAC,CAAC,CAAC;IAChH;EACF,CAAC;EACDhF,YAAY,CAACc,MAAM,EAAE,yBAAyB,EAAEyG,oBAAoB,CAAC;;EAErE;AACF;AACA;EACE,MAAMK,cAAc,GAAGvI,KAAK,CAAC8C,WAAW,CAAC,MAAM;IAC7CZ,MAAM,CAACsG,IAAI,CAAC,gEAAgE,CAAC;IAC7E,MAAM9G,YAAY,GAAGV,kBAAkB,CAAC;MACtCS,MAAM;MACNE,eAAe,EAAE,EAAE;MACnBE,YAAY,EAAEoC,SAAS;MACvBlC,uBAAuB,EAAE;IAC3B,CAAC,CAAC;IACFc,mBAAmB,CAACnB,YAAY,CAAC;EACnC,CAAC,EAAE,CAACD,MAAM,EAAES,MAAM,EAAEW,mBAAmB,CAAC,CAAC;EACzChC,0BAA0B,CAACY,MAAM,EAAE,gBAAgB,EAAE8G,cAAc,CAAC;;EAEpE;AACF;AACA;EACE;EACA;EACA,MAAME,aAAa,GAAGzI,KAAK,CAACoC,MAAM,CAAC,IAAI,CAAC;EACxCpC,KAAK,CAAC0I,SAAS,CAAC,MAAM;IACpB,IAAID,aAAa,CAACpG,OAAO,EAAE;MACzBoG,aAAa,CAACpG,OAAO,GAAG,KAAK;MAC7B;IACF;IACAH,MAAM,CAACsG,IAAI,CAAC,wCAAwChH,KAAK,CAACI,OAAO,CAACgF,MAAM,EAAE,CAAC;IAC3E,IAAIzE,mBAAmB,CAACE,OAAO,KAAKb,KAAK,CAACI,OAAO,EAAE;MACjD;IACF;IACA,MAAMF,YAAY,GAAGV,kBAAkB,CAAC;MACtCS,MAAM;MACNI,YAAY,EAAEoC,SAAS;MACvB;MACAtC,eAAe,EAAEH,KAAK,CAACI,OAAO;MAC9BG,uBAAuB,EAAE,IAAI;MAC7BsC,4BAA4B,EAAE;IAChC,CAAC,CAAC;IACFlC,mBAAmB,CAACE,OAAO,GAAGb,KAAK,CAACI,OAAO;IAC3CiB,mBAAmB,CAACnB,YAAY,CAAC;EACnC,CAAC,EAAE,CAACQ,MAAM,EAAET,MAAM,EAAEoB,mBAAmB,EAAErB,KAAK,CAACI,OAAO,CAAC,CAAC;EACxD5B,KAAK,CAAC0I,SAAS,CAAC,MAAM;IACpB,IAAIlH,KAAK,CAACM,qBAAqB,KAAKmC,SAAS,EAAE;MAC7CxC,MAAM,CAACY,OAAO,CAACyB,wBAAwB,CAACtC,KAAK,CAACM,qBAAqB,CAAC;IACtE;EACF,CAAC,EAAE,CAACL,MAAM,EAAES,MAAM,EAAEV,KAAK,CAACM,qBAAqB,CAAC,CAAC;AACnD;AACA,SAASmB,iBAAiBA,CAACvB,YAAY,EAAE;EACvC,OAAOH,KAAK,IAAIxB,QAAQ,CAAC,CAAC,CAAC,EAAEwB,KAAK,EAAE;IAClCK,OAAO,EAAEF;EACX,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}