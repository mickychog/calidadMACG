{"ast":null,"code":"var _jsxFileName = \"D:\\\\2025\\\\Calidad de Software\\\\calidadMACG\\\\Ejercicios\\\\Ejercicio Jmeter-Selenium\\\\frontend\\\\src\\\\components\\\\PersonaTable.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { getPersonas } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: 'carnet',\n  headerName: 'Carnet',\n  width: 120\n}, {\n  field: 'nombres',\n  headerName: 'Nombres',\n  width: 150\n}, {\n  field: 'apellidos',\n  headerName: 'Apellidos',\n  width: 150\n}, {\n  field: 'sexo',\n  headerName: 'Sexo',\n  width: 100\n}, {\n  field: 'fechaNacimiento',\n  headerName: 'Fecha Nac.',\n  width: 120\n}, {\n  field: 'profesion',\n  headerName: 'Profesi贸n',\n  width: 150\n}, {\n  field: 'celular',\n  headerName: 'Celular',\n  width: 120\n}, {\n  field: 'direccion',\n  headerName: 'Direcci贸n',\n  width: 200\n}];\nexport const PersonaTable = () => {\n  _s();\n  const [personas, setPersonas] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const fetchPersonas = async () => {\n    try {\n      setLoading(true);\n      const response = await getPersonas();\n      setPersonas(response.data);\n    } catch (error) {\n      console.error('Error al obtener personas:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchPersonas();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 400,\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: personas,\n      columns: columns,\n      pageSize: 5,\n      rowsPerPageOptions: [5],\n      loading: loading,\n      getRowId: row => row.carnet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(PersonaTable, \"UtJXgNq9LKntAA3GJM9a6j4ALG4=\");\n_c = PersonaTable;\nvar _c;\n$RefreshReg$(_c, \"PersonaTable\");","map":{"version":3,"names":["React","useEffect","useState","DataGrid","getPersonas","jsxDEV","_jsxDEV","columns","field","headerName","width","PersonaTable","_s","personas","setPersonas","loading","setLoading","fetchPersonas","response","data","error","console","style","height","children","rows","pageSize","rowsPerPageOptions","getRowId","row","carnet","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/2025/Calidad de Software/calidadMACG/Ejercicios/Ejercicio Jmeter-Selenium/frontend/src/components/PersonaTable.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { DataGrid, GridColDef } from '@mui/x-data-grid';\r\nimport { getPersonas } from '../services/api';\r\n\r\nconst columns: GridColDef[] = [\r\n  { field: 'carnet', headerName: 'Carnet', width: 120 },\r\n  { field: 'nombres', headerName: 'Nombres', width: 150 },\r\n  { field: 'apellidos', headerName: 'Apellidos', width: 150 },\r\n  { field: 'sexo', headerName: 'Sexo', width: 100 },\r\n  { field: 'fechaNacimiento', headerName: 'Fecha Nac.', width: 120 },\r\n  { field: 'profesion', headerName: 'Profesi贸n', width: 150 },\r\n  { field: 'celular', headerName: 'Celular', width: 120 },\r\n  { field: 'direccion', headerName: 'Direcci贸n', width: 200 },\r\n];\r\n\r\nexport const PersonaTable: React.FC = () => {\r\n  const [personas, setPersonas] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchPersonas = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await getPersonas();\r\n      setPersonas(response.data);\r\n    } catch (error) {\r\n      console.error('Error al obtener personas:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPersonas();\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ height: 400, width: '100%' }}>\r\n      <DataGrid\r\n        rows={personas}\r\n        columns={columns}\r\n        pageSize={5}\r\n        rowsPerPageOptions={[5]}\r\n        loading={loading}\r\n        getRowId={(row) => row.carnet}\r\n      />\r\n    </div>\r\n  );\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAoB,kBAAkB;AACvD,SAASC,WAAW,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,OAAqB,GAAG,CAC5B;EAAEC,KAAK,EAAE,QAAQ;EAAEC,UAAU,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAI,CAAC,EACrD;EAAEF,KAAK,EAAE,SAAS;EAAEC,UAAU,EAAE,SAAS;EAAEC,KAAK,EAAE;AAAI,CAAC,EACvD;EAAEF,KAAK,EAAE,WAAW;EAAEC,UAAU,EAAE,WAAW;EAAEC,KAAK,EAAE;AAAI,CAAC,EAC3D;EAAEF,KAAK,EAAE,MAAM;EAAEC,UAAU,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAI,CAAC,EACjD;EAAEF,KAAK,EAAE,iBAAiB;EAAEC,UAAU,EAAE,YAAY;EAAEC,KAAK,EAAE;AAAI,CAAC,EAClE;EAAEF,KAAK,EAAE,WAAW;EAAEC,UAAU,EAAE,WAAW;EAAEC,KAAK,EAAE;AAAI,CAAC,EAC3D;EAAEF,KAAK,EAAE,SAAS;EAAEC,UAAU,EAAE,SAAS;EAAEC,KAAK,EAAE;AAAI,CAAC,EACvD;EAAEF,KAAK,EAAE,WAAW;EAAEC,UAAU,EAAE,WAAW;EAAEC,KAAK,EAAE;AAAI,CAAC,CAC5D;AAED,OAAO,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAQ,EAAE,CAAC;EACnD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMe,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACFD,UAAU,CAAC,IAAI,CAAC;MAChB,MAAME,QAAQ,GAAG,MAAMd,WAAW,CAAC,CAAC;MACpCU,WAAW,CAACI,QAAQ,CAACC,IAAI,CAAC;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD,CAAC,SAAS;MACRJ,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDf,SAAS,CAAC,MAAM;IACdgB,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA;IAAKgB,KAAK,EAAE;MAAEC,MAAM,EAAE,GAAG;MAAEb,KAAK,EAAE;IAAO,CAAE;IAAAc,QAAA,eACzClB,OAAA,CAACH,QAAQ;MACPsB,IAAI,EAAEZ,QAAS;MACfN,OAAO,EAAEA,OAAQ;MACjBmB,QAAQ,EAAE,CAAE;MACZC,kBAAkB,EAAE,CAAC,CAAC,CAAE;MACxBZ,OAAO,EAAEA,OAAQ;MACjBa,QAAQ,EAAGC,GAAG,IAAKA,GAAG,CAACC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACtB,EAAA,CAhCWD,YAAsB;AAAAwB,EAAA,GAAtBxB,YAAsB;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}