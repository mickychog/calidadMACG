{"ast":null,"code":"var _jsxFileName = \"D:\\\\2025\\\\Calidad de Software\\\\calidadMACG\\\\Ejercicios\\\\Ejercicio Jmeter-Selenium\\\\frontend\\\\src\\\\components\\\\PersonaTable.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { getPersonas } from \"../services/api\";\n\n// Definición de tipos para TypeScript\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"carnet\",\n  headerName: \"Carnet\",\n  width: 120\n}, {\n  field: \"nombres\",\n  headerName: \"Nombres\",\n  width: 150\n}, {\n  field: \"apellidos\",\n  headerName: \"Apellidos\",\n  width: 150\n}, {\n  field: \"sexo\",\n  headerName: \"Sexo\",\n  width: 100\n}, {\n  field: \"fechaNacimiento\",\n  headerName: \"Fecha Nac.\",\n  width: 120,\n  valueFormatter: params => params.value ? new Date(params.value).toLocaleDateString() : \"\"\n}, {\n  field: \"profesion\",\n  headerName: \"Profesión\",\n  width: 150\n}, {\n  field: \"celular\",\n  headerName: \"Celular\",\n  width: 120\n}, {\n  field: \"direccion\",\n  headerName: \"Dirección\",\n  width: 200\n}];\nexport const PersonaTable = () => {\n  _s();\n  const [personas, setPersonas] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [paginationModel, setPaginationModel] = useState({\n    page: 0,\n    pageSize: 5\n  });\n  const fetchPersonas = async () => {\n    try {\n      setLoading(true);\n      const response = await getPersonas();\n      // Asegurarse que los datos vienen en el formato correcto\n      const datos = Array.isArray(response === null || response === void 0 ? void 0 : response.data) ? response.data : [];\n      setPersonas(datos);\n    } catch (error) {\n      console.error(\"Error al obtener personas:\", error);\n      setPersonas([]); // Asegurar que siempre hay un array\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchPersonas();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 400,\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: personas,\n      columns: columns,\n      paginationModel: paginationModel,\n      onPaginationModelChange: setPaginationModel,\n      pageSizeOptions: [5, 10, 25],\n      loading: loading,\n      getRowId: row => row.carnet,\n      sx: {\n        boxShadow: 2,\n        border: 2,\n        borderColor: \"primary.light\",\n        \"& .MuiDataGrid-cell:hover\": {\n          color: \"primary.main\"\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(PersonaTable, \"+AldyFNlNZ07RaNylrVHfLt8XHU=\");\n_c = PersonaTable;\nvar _c;\n$RefreshReg$(_c, \"PersonaTable\");","map":{"version":3,"names":["React","useEffect","useState","DataGrid","getPersonas","jsxDEV","_jsxDEV","columns","field","headerName","width","valueFormatter","params","value","Date","toLocaleDateString","PersonaTable","_s","personas","setPersonas","loading","setLoading","paginationModel","setPaginationModel","page","pageSize","fetchPersonas","response","datos","Array","isArray","data","error","console","style","height","children","rows","onPaginationModelChange","pageSizeOptions","getRowId","row","carnet","sx","boxShadow","border","borderColor","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/2025/Calidad de Software/calidadMACG/Ejercicios/Ejercicio Jmeter-Selenium/frontend/src/components/PersonaTable.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { DataGrid, GridColDef, GridPaginationModel } from \"@mui/x-data-grid\";\r\nimport { getPersonas } from \"../services/api\";\r\n\r\n// Definición de tipos para TypeScript\r\ninterface Persona {\r\n  id?: number;\r\n  carnet: string;\r\n  nombres: string;\r\n  apellidos: string;\r\n  sexo: string;\r\n  fechaNacimiento: string | Date;\r\n  profesion: string;\r\n  celular: string;\r\n  direccion: string;\r\n  fechaRegistro?: string | Date;\r\n}\r\n\r\nconst columns: GridColDef<Persona>[] = [\r\n  { field: \"carnet\", headerName: \"Carnet\", width: 120 },\r\n  { field: \"nombres\", headerName: \"Nombres\", width: 150 },\r\n  { field: \"apellidos\", headerName: \"Apellidos\", width: 150 },\r\n  { field: \"sexo\", headerName: \"Sexo\", width: 100 },\r\n  {\r\n    field: \"fechaNacimiento\",\r\n    headerName: \"Fecha Nac.\",\r\n    width: 120,\r\n    valueFormatter: (params) =>\r\n      params.value ? new Date(params.value).toLocaleDateString() : \"\",\r\n  },\r\n  { field: \"profesion\", headerName: \"Profesión\", width: 150 },\r\n  { field: \"celular\", headerName: \"Celular\", width: 120 },\r\n  { field: \"direccion\", headerName: \"Dirección\", width: 200 },\r\n];\r\n\r\nexport const PersonaTable: React.FC = () => {\r\n  const [personas, setPersonas] = useState<Persona[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [paginationModel, setPaginationModel] = useState<GridPaginationModel>({\r\n    page: 0,\r\n    pageSize: 5,\r\n  });\r\n\r\n  const fetchPersonas = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await getPersonas();\r\n      // Asegurarse que los datos vienen en el formato correcto\r\n      const datos = Array.isArray(response?.data) ? response.data : [];\r\n      setPersonas(datos);\r\n    } catch (error) {\r\n      console.error(\"Error al obtener personas:\", error);\r\n      setPersonas([]); // Asegurar que siempre hay un array\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPersonas();\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ height: 400, width: \"100%\" }}>\r\n      <DataGrid\r\n        rows={personas}\r\n        columns={columns}\r\n        paginationModel={paginationModel}\r\n        onPaginationModelChange={setPaginationModel}\r\n        pageSizeOptions={[5, 10, 25]}\r\n        loading={loading}\r\n        getRowId={(row) => row.carnet}\r\n        sx={{\r\n          boxShadow: 2,\r\n          border: 2,\r\n          borderColor: \"primary.light\",\r\n          \"& .MuiDataGrid-cell:hover\": {\r\n            color: \"primary.main\",\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}