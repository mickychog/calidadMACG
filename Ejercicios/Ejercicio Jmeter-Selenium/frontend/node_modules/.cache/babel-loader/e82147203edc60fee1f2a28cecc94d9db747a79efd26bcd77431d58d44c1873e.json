{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { forwardRef } from '@mui/x-internals/forwardRef';\nimport { gridDensitySelector } from \"../../hooks/features/density/densitySelector.js\";\nimport { isHideMenuKey } from \"../../utils/keyboardUtils.js\";\nimport { useGridApiContext } from \"../../hooks/utils/useGridApiContext.js\";\nimport { useGridSelector } from \"../../hooks/utils/useGridSelector.js\";\nimport { GridMenu } from \"../menu/GridMenu.js\";\nimport { useGridRootProps } from \"../../hooks/utils/useGridRootProps.js\";\nimport { gridClasses } from \"../../constants/gridClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/**\n * @deprecated See {@link https://mui.com/x/react-data-grid/accessibility/#set-the-density-programmatically Accessibilityâ€”Set the density programmatically} for an example of adding a density selector to the toolbar. This component will be removed in a future major release.\n */\nconst GridToolbarDensitySelector = forwardRef(function GridToolbarDensitySelector(props, ref) {\n  const {\n    slotProps = {}\n  } = props;\n  const buttonProps = slotProps.button || {};\n  const tooltipProps = slotProps.tooltip || {};\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const density = useGridSelector(apiRef, gridDensitySelector);\n  const densityButtonId = useId();\n  const densityMenuId = useId();\n  const [open, setOpen] = React.useState(false);\n  const buttonRef = React.useRef(null);\n  const handleRef = useForkRef(ref, buttonRef);\n  const densityOptions = [{\n    icon: /*#__PURE__*/_jsx(rootProps.slots.densityCompactIcon, {}),\n    label: apiRef.current.getLocaleText('toolbarDensityCompact'),\n    value: 'compact'\n  }, {\n    icon: /*#__PURE__*/_jsx(rootProps.slots.densityStandardIcon, {}),\n    label: apiRef.current.getLocaleText('toolbarDensityStandard'),\n    value: 'standard'\n  }, {\n    icon: /*#__PURE__*/_jsx(rootProps.slots.densityComfortableIcon, {}),\n    label: apiRef.current.getLocaleText('toolbarDensityComfortable'),\n    value: 'comfortable'\n  }];\n  const startIcon = React.useMemo(() => {\n    switch (density) {\n      case 'compact':\n        return /*#__PURE__*/_jsx(rootProps.slots.densityCompactIcon, {});\n      case 'comfortable':\n        return /*#__PURE__*/_jsx(rootProps.slots.densityComfortableIcon, {});\n      default:\n        return /*#__PURE__*/_jsx(rootProps.slots.densityStandardIcon, {});\n    }\n  }, [density, rootProps]);\n  const handleDensitySelectorOpen = event => {\n    setOpen(prevOpen => !prevOpen);\n    buttonProps.onClick?.(event);\n  };\n  const handleDensitySelectorClose = () => {\n    setOpen(false);\n  };\n  const handleDensityUpdate = newDensity => {\n    apiRef.current.setDensity(newDensity);\n    setOpen(false);\n  };\n  const handleListKeyDown = event => {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n    }\n    if (isHideMenuKey(event.key)) {\n      setOpen(false);\n    }\n  };\n\n  // Disable the button if the corresponding is disabled\n  if (rootProps.disableDensitySelector) {\n    return null;\n  }\n  const densityElements = densityOptions.map((option, index) => /*#__PURE__*/_jsx(rootProps.slots.baseMenuItem, {\n    onClick: () => handleDensityUpdate(option.value),\n    selected: option.value === density,\n    iconStart: option.icon,\n    children: option.label\n  }, index));\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(rootProps.slots.baseTooltip, _extends({\n      title: apiRef.current.getLocaleText('toolbarDensityLabel'),\n      enterDelay: 1000\n    }, rootProps.slotProps?.baseTooltip, tooltipProps, {\n      children: /*#__PURE__*/_jsx(rootProps.slots.baseButton, _extends({\n        size: \"small\",\n        startIcon: startIcon,\n        \"aria-label\": apiRef.current.getLocaleText('toolbarDensityLabel'),\n        \"aria-haspopup\": \"menu\",\n        \"aria-expanded\": open,\n        \"aria-controls\": open ? densityMenuId : undefined,\n        id: densityButtonId\n      }, rootProps.slotProps?.baseButton, buttonProps, {\n        onClick: handleDensitySelectorOpen,\n        ref: handleRef,\n        children: apiRef.current.getLocaleText('toolbarDensity')\n      }))\n    })), /*#__PURE__*/_jsx(GridMenu, {\n      open: open,\n      target: buttonRef.current,\n      onClose: handleDensitySelectorClose,\n      position: \"bottom-end\",\n      children: /*#__PURE__*/_jsx(rootProps.slots.baseMenuList, {\n        id: densityMenuId,\n        className: gridClasses.menuList,\n        \"aria-labelledby\": densityButtonId,\n        onKeyDown: handleListKeyDown,\n        autoFocusItem: open,\n        children: densityElements\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? GridToolbarDensitySelector.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.object\n} : void 0;\nexport { GridToolbarDensitySelector };","map":{"version":3,"names":["_extends","React","PropTypes","unstable_useId","useId","unstable_useForkRef","useForkRef","forwardRef","gridDensitySelector","isHideMenuKey","useGridApiContext","useGridSelector","GridMenu","useGridRootProps","gridClasses","jsx","_jsx","jsxs","_jsxs","GridToolbarDensitySelector","props","ref","slotProps","buttonProps","button","tooltipProps","tooltip","apiRef","rootProps","density","densityButtonId","densityMenuId","open","setOpen","useState","buttonRef","useRef","handleRef","densityOptions","icon","slots","densityCompactIcon","label","current","getLocaleText","value","densityStandardIcon","densityComfortableIcon","startIcon","useMemo","handleDensitySelectorOpen","event","prevOpen","onClick","handleDensitySelectorClose","handleDensityUpdate","newDensity","setDensity","handleListKeyDown","key","preventDefault","disableDensitySelector","densityElements","map","option","index","baseMenuItem","selected","iconStart","children","Fragment","baseTooltip","title","enterDelay","baseButton","size","undefined","id","target","onClose","position","baseMenuList","className","menuList","onKeyDown","autoFocusItem","process","env","NODE_ENV","propTypes","object"],"sources":["D:/2025/Calidad de Software/calidadMACG/Ejercicios/Ejercicio Jmeter-Selenium/frontend/node_modules/@mui/x-data-grid/esm/components/toolbar/GridToolbarDensitySelector.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { forwardRef } from '@mui/x-internals/forwardRef';\nimport { gridDensitySelector } from \"../../hooks/features/density/densitySelector.js\";\nimport { isHideMenuKey } from \"../../utils/keyboardUtils.js\";\nimport { useGridApiContext } from \"../../hooks/utils/useGridApiContext.js\";\nimport { useGridSelector } from \"../../hooks/utils/useGridSelector.js\";\nimport { GridMenu } from \"../menu/GridMenu.js\";\nimport { useGridRootProps } from \"../../hooks/utils/useGridRootProps.js\";\nimport { gridClasses } from \"../../constants/gridClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/**\n * @deprecated See {@link https://mui.com/x/react-data-grid/accessibility/#set-the-density-programmatically Accessibilityâ€”Set the density programmatically} for an example of adding a density selector to the toolbar. This component will be removed in a future major release.\n */\nconst GridToolbarDensitySelector = forwardRef(function GridToolbarDensitySelector(props, ref) {\n  const {\n    slotProps = {}\n  } = props;\n  const buttonProps = slotProps.button || {};\n  const tooltipProps = slotProps.tooltip || {};\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const density = useGridSelector(apiRef, gridDensitySelector);\n  const densityButtonId = useId();\n  const densityMenuId = useId();\n  const [open, setOpen] = React.useState(false);\n  const buttonRef = React.useRef(null);\n  const handleRef = useForkRef(ref, buttonRef);\n  const densityOptions = [{\n    icon: /*#__PURE__*/_jsx(rootProps.slots.densityCompactIcon, {}),\n    label: apiRef.current.getLocaleText('toolbarDensityCompact'),\n    value: 'compact'\n  }, {\n    icon: /*#__PURE__*/_jsx(rootProps.slots.densityStandardIcon, {}),\n    label: apiRef.current.getLocaleText('toolbarDensityStandard'),\n    value: 'standard'\n  }, {\n    icon: /*#__PURE__*/_jsx(rootProps.slots.densityComfortableIcon, {}),\n    label: apiRef.current.getLocaleText('toolbarDensityComfortable'),\n    value: 'comfortable'\n  }];\n  const startIcon = React.useMemo(() => {\n    switch (density) {\n      case 'compact':\n        return /*#__PURE__*/_jsx(rootProps.slots.densityCompactIcon, {});\n      case 'comfortable':\n        return /*#__PURE__*/_jsx(rootProps.slots.densityComfortableIcon, {});\n      default:\n        return /*#__PURE__*/_jsx(rootProps.slots.densityStandardIcon, {});\n    }\n  }, [density, rootProps]);\n  const handleDensitySelectorOpen = event => {\n    setOpen(prevOpen => !prevOpen);\n    buttonProps.onClick?.(event);\n  };\n  const handleDensitySelectorClose = () => {\n    setOpen(false);\n  };\n  const handleDensityUpdate = newDensity => {\n    apiRef.current.setDensity(newDensity);\n    setOpen(false);\n  };\n  const handleListKeyDown = event => {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n    }\n    if (isHideMenuKey(event.key)) {\n      setOpen(false);\n    }\n  };\n\n  // Disable the button if the corresponding is disabled\n  if (rootProps.disableDensitySelector) {\n    return null;\n  }\n  const densityElements = densityOptions.map((option, index) => /*#__PURE__*/_jsx(rootProps.slots.baseMenuItem, {\n    onClick: () => handleDensityUpdate(option.value),\n    selected: option.value === density,\n    iconStart: option.icon,\n    children: option.label\n  }, index));\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(rootProps.slots.baseTooltip, _extends({\n      title: apiRef.current.getLocaleText('toolbarDensityLabel'),\n      enterDelay: 1000\n    }, rootProps.slotProps?.baseTooltip, tooltipProps, {\n      children: /*#__PURE__*/_jsx(rootProps.slots.baseButton, _extends({\n        size: \"small\",\n        startIcon: startIcon,\n        \"aria-label\": apiRef.current.getLocaleText('toolbarDensityLabel'),\n        \"aria-haspopup\": \"menu\",\n        \"aria-expanded\": open,\n        \"aria-controls\": open ? densityMenuId : undefined,\n        id: densityButtonId\n      }, rootProps.slotProps?.baseButton, buttonProps, {\n        onClick: handleDensitySelectorOpen,\n        ref: handleRef,\n        children: apiRef.current.getLocaleText('toolbarDensity')\n      }))\n    })), /*#__PURE__*/_jsx(GridMenu, {\n      open: open,\n      target: buttonRef.current,\n      onClose: handleDensitySelectorClose,\n      position: \"bottom-end\",\n      children: /*#__PURE__*/_jsx(rootProps.slots.baseMenuList, {\n        id: densityMenuId,\n        className: gridClasses.menuList,\n        \"aria-labelledby\": densityButtonId,\n        onKeyDown: handleListKeyDown,\n        autoFocusItem: open,\n        children: densityElements\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? GridToolbarDensitySelector.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.object\n} : void 0;\nexport { GridToolbarDensitySelector };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}