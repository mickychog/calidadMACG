{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { GridSignature } from \"../../../constants/signature.js\";\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { useGridSelector } from \"../../utils/useGridSelector.js\";\nimport { gridRowsLookupSelector, gridRowMaximumTreeDepthSelector, gridRowNodeSelector, gridRowTreeSelector } from \"../rows/gridRowsSelector.js\";\nimport { gridRowSelectionManagerSelector, gridRowSelectionStateSelector, gridRowSelectionCountSelector, gridRowSelectionIdsSelector } from \"./gridRowSelectionSelector.js\";\nimport { gridFocusCellSelector } from \"../focus/gridFocusStateSelector.js\";\nimport { gridExpandedSortedRowIdsSelector, gridFilteredRowsLookupSelector, gridFilterModelSelector, gridQuickFilterValuesSelector } from \"../filter/gridFilterSelector.js\";\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from \"../../../colDef/index.js\";\nimport { GridCellModes } from \"../../../models/gridEditRowModel.js\";\nimport { isKeyboardEvent, isNavigationKey } from \"../../../utils/keyboardUtils.js\";\nimport { getVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from \"../../../internals/constants.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { isEventTargetInPortal } from \"../../../utils/domUtils.js\";\nimport { isMultipleRowSelectionEnabled, findRowsToSelect, findRowsToDeselect } from \"./utils.js\";\nimport { createRowSelectionManager } from \"../../../models/gridRowSelectionManager.js\";\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from \"../pagination/index.js\";\nconst emptyModel = {\n  type: 'include',\n  ids: new Set()\n};\nexport const rowSelectionStateInitializer = (state, props) => _extends({}, state, {\n  rowSelection: props.rowSelection ? props.rowSelectionModel ?? emptyModel : emptyModel\n});\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport const useGridRowSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = React.useCallback(callback => (...args) => {\n    if (props.rowSelection) {\n      callback(...args);\n    }\n  }, [props.rowSelection]);\n  const applyAutoSelection = props.signature !== GridSignature.DataGrid && (props.rowSelectionPropagation?.parents || props.rowSelectionPropagation?.descendants);\n  const propRowSelectionModel = React.useMemo(() => {\n    return props.rowSelectionModel;\n  }, [props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableRowSelectionOnClick,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = isMultipleRowSelectionEnabled(props);\n  const tree = useGridSelector(apiRef, gridRowTreeSelector);\n  const isNestedData = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector) > 1;\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    let endId = id;\n    const startId = lastRowToggled.current ?? id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  const getRowsToBeSelected = useEventCallback(() => {\n    const rowsToBeSelected = props.pagination && props.checkboxSelectionVisibleOnly && props.paginationMode === 'client' ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    return rowsToBeSelected;\n  });\n\n  /*\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === GridSignature.DataGrid && !canHaveMultipleSelection && (model.type !== 'include' || model.ids.size > 1)) {\n      throw new Error(['MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = gridRowSelectionStateSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : emptyModel\n      }));\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, canHaveMultipleSelection]);\n  const isRowSelected = React.useCallback(id => {\n    const selectionManager = gridRowSelectionManagerSelector(apiRef);\n    return selectionManager.has(id);\n  }, [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (props.rowSelection === false) {\n      return false;\n    }\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = gridRowNodeSelector(apiRef, id);\n    if (rowNode?.type === 'footer' || rowNode?.type === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, props.rowSelection, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => gridRowSelectionIdsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      const newSelectionModel = {\n        type: 'include',\n        ids: new Set()\n      };\n      const addRow = rowId => {\n        newSelectionModel.ids.add(rowId);\n      };\n      if (isSelected) {\n        addRow(id);\n        if (applyAutoSelection) {\n          findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n        }\n      }\n      apiRef.current.setRowSelectionModel(newSelectionModel);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selectionModel = gridRowSelectionStateSelector(apiRef);\n      const newSelectionModel = {\n        type: selectionModel.type,\n        ids: new Set(selectionModel.ids)\n      };\n      const selectionManager = createRowSelectionManager(newSelectionModel);\n      selectionManager.unselect(id);\n      const addRow = rowId => {\n        selectionManager.select(rowId);\n      };\n      const removeRow = rowId => {\n        selectionManager.unselect(rowId);\n      };\n      if (isSelected) {\n        addRow(id);\n        if (applyAutoSelection) {\n          findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n        }\n      } else if (applyAutoSelection) {\n        findRowsToDeselect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, removeRow);\n      }\n      const isSelectionValid = newSelectionModel.type === 'include' && newSelectionModel.ids.size < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelectionModel);\n      }\n    }\n  }, [apiRef, logger, applyAutoSelection, tree, props.rowSelectionPropagation?.descendants, props.rowSelectionPropagation?.parents, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    if (props.rowSelection === false) {\n      return;\n    }\n    const selectableIds = new Set();\n    for (let i = 0; i < ids.length; i += 1) {\n      const id = ids[i];\n      if (apiRef.current.isRowSelectable(id)) {\n        selectableIds.add(id);\n      }\n    }\n    const currentSelectionModel = gridRowSelectionStateSelector(apiRef);\n    let newSelectionModel;\n    if (resetSelection) {\n      newSelectionModel = {\n        type: 'include',\n        ids: selectableIds\n      };\n      if (isSelected) {\n        const selectionManager = createRowSelectionManager(newSelectionModel);\n        if (applyAutoSelection) {\n          const addRow = rowId => {\n            selectionManager.select(rowId);\n          };\n          for (const id of selectableIds) {\n            findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n          }\n        }\n      } else {\n        newSelectionModel.ids = new Set();\n      }\n      if (currentSelectionModel.type === newSelectionModel.type && newSelectionModel.ids.size === currentSelectionModel.ids.size && Array.from(newSelectionModel.ids).every(id => currentSelectionModel.ids.has(id))) {\n        return;\n      }\n    } else {\n      newSelectionModel = {\n        type: currentSelectionModel.type,\n        ids: new Set(currentSelectionModel.ids)\n      };\n      const selectionManager = createRowSelectionManager(newSelectionModel);\n      const addRow = rowId => {\n        selectionManager.select(rowId);\n      };\n      const removeRow = rowId => {\n        selectionManager.unselect(rowId);\n      };\n      for (const id of selectableIds) {\n        if (isSelected) {\n          selectionManager.select(id);\n          if (applyAutoSelection) {\n            findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n          }\n        } else {\n          removeRow(id);\n          if (applyAutoSelection) {\n            findRowsToDeselect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, removeRow);\n          }\n        }\n      }\n    }\n    const isSelectionValid = newSelectionModel.type === 'include' && newSelectionModel.ids.size < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelectionModel);\n    }\n  }, [logger, applyAutoSelection, canHaveMultipleSelection, apiRef, tree, props.rowSelectionPropagation?.descendants, props.rowSelectionPropagation?.parents, props.rowSelection]);\n  const getPropagatedRowSelectionModel = React.useCallback(inputSelectionModel => {\n    if (!isNestedData || !applyAutoSelection || inputSelectionModel.ids.size === 0 && inputSelectionModel.type === 'include') {\n      return inputSelectionModel;\n    }\n    const propagatedSelectionModel = {\n      type: inputSelectionModel.type,\n      ids: new Set(inputSelectionModel.ids)\n    };\n    const selectionManager = createRowSelectionManager(propagatedSelectionModel);\n    const addRow = rowId => {\n      selectionManager.select(rowId);\n    };\n    for (const id of inputSelectionModel.ids) {\n      findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow, selectionManager);\n    }\n    return propagatedSelectionModel;\n  }, [apiRef, tree, props.rowSelectionPropagation?.descendants, props.rowSelectionPropagation?.parents, isNestedData, applyAutoSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange,\n    getPropagatedRowSelectionModel\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /*\n   * EVENTS\n   */\n  const isFirstRender = React.useRef(true);\n  const removeOutdatedSelection = React.useCallback((sortModelUpdated = false) => {\n    if (isFirstRender.current) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef);\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n    const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n    const isNonExistent = id => {\n      if (props.filterMode === 'server') {\n        return !rowsLookup[id];\n      }\n      return !rowsLookup[id] || filteredRowsLookup[id] === false;\n    };\n    const newSelectionModel = {\n      type: currentSelection.type,\n      ids: new Set(currentSelection.ids)\n    };\n    const selectionManager = createRowSelectionManager(newSelectionModel);\n    let hasChanged = false;\n    for (const id of currentSelection.ids) {\n      if (isNonExistent(id)) {\n        if (props.keepNonExistentRowsSelected) {\n          continue;\n        }\n        selectionManager.unselect(id);\n        hasChanged = true;\n        continue;\n      }\n      if (!props.rowSelectionPropagation?.parents) {\n        continue;\n      }\n      const node = tree[id];\n      if (node?.type === 'group') {\n        const isAutoGenerated = node.isAutoGenerated;\n        if (isAutoGenerated) {\n          selectionManager.unselect(id);\n          hasChanged = true;\n          continue;\n        }\n        // Keep previously selected tree data parents selected if all their children are filtered out\n        if (!node.children.every(childId => filteredRowsLookup[childId] === false)) {\n          selectionManager.unselect(id);\n          hasChanged = true;\n        }\n      }\n    }\n\n    // For nested data, on row tree updation (filtering, adding rows, etc.) when the selection is\n    // not empty, we need to re-run scanning of the tree to propagate the selection changes\n    // Example: A parent whose de-selected children are filtered out should now be selected\n    const shouldReapplyPropagation = isNestedData && props.rowSelectionPropagation?.parents && (newSelectionModel.ids.size > 0 ||\n    // In case of exclude selection, newSelectionModel.ids.size === 0 means all rows are selected\n    newSelectionModel.type === 'exclude');\n    if (hasChanged || shouldReapplyPropagation && !sortModelUpdated) {\n      if (shouldReapplyPropagation) {\n        if (newSelectionModel.type === 'exclude') {\n          const unfilteredSelectedRowIds = getRowsToBeSelected();\n          const selectedRowIds = [];\n          for (let i = 0; i < unfilteredSelectedRowIds.length; i += 1) {\n            const rowId = unfilteredSelectedRowIds[i];\n            if ((props.keepNonExistentRowsSelected || !isNonExistent(rowId)) && selectionManager.has(rowId)) {\n              selectedRowIds.push(rowId);\n            }\n          }\n          apiRef.current.selectRows(selectedRowIds, true, true);\n        } else {\n          apiRef.current.selectRows(Array.from(newSelectionModel.ids), true, true);\n        }\n      } else {\n        apiRef.current.setRowSelectionModel(newSelectionModel);\n      }\n    }\n  }, [apiRef, isNestedData, props.rowSelectionPropagation?.parents, props.keepNonExistentRowsSelected, props.filterMode, tree, getRowsToBeSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    const selectedRowsCount = gridRowSelectionCountSelector(apiRef);\n\n    // Clicking on a row should toggle the selection except when a range of rows is already selected and the selection should reset\n    // In that case, we want to keep the current row selected (https://github.com/mui/mui-x/pull/15509#discussion_r1878082687)\n    const shouldStaySelected = selectedRowsCount > 1 && resetSelection;\n    const newSelectionState = shouldStaySelected || !isSelected;\n    apiRef.current.selectRow(id, newSelectionState, resetSelection);\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = event.target.closest(`.${gridClasses.cell}`)?.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if (column?.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = gridRowNodeSelector(apiRef, params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && canHaveMultipleSelection) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      window.getSelection()?.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value, !canHaveMultipleSelection);\n    }\n  }, [apiRef, expandMouseRowRangeSelection, canHaveMultipleSelection]);\n  const toggleAllRows = React.useCallback(value => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const quickFilterModel = gridQuickFilterValuesSelector(apiRef);\n    const hasFilters = filterModel.items.length > 0 || (quickFilterModel?.length || 0) > 0;\n    if (!props.isRowSelectable && !props.checkboxSelectionVisibleOnly && applyAutoSelection && !hasFilters) {\n      apiRef.current.setRowSelectionModel({\n        type: value ? 'exclude' : 'include',\n        ids: new Set()\n      });\n    } else {\n      apiRef.current.selectRows(getRowsToBeSelected(), value);\n    }\n  }, [apiRef, applyAutoSelection, getRowsToBeSelected, props.checkboxSelectionVisibleOnly, props.isRowSelectable]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    toggleAllRows(params.value);\n  }, [toggleAllRows]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const visibleRows = getVisibleRows(apiRef);\n        const rowsBetweenStartAndEnd = [];\n        for (let i = start; i <= end; i += 1) {\n          rowsBetweenStartAndEnd.push(visibleRows.rows[i].id);\n        }\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (String.fromCharCode(event.keyCode) === 'A' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      toggleAllRows(true);\n    }\n  }, [apiRef, canHaveMultipleSelection, handleSingleRowSelection, toggleAllRows]);\n  const syncControlledState = useEventCallback(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel(emptyModel);\n      return;\n    }\n    if (propRowSelectionModel === undefined) {\n      return;\n    }\n    if (!applyAutoSelection || !isNestedData || propRowSelectionModel.type === 'include' && propRowSelectionModel.ids.size === 0) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n      return;\n    }\n    const newSelectionModel = apiRef.current.getPropagatedRowSelectionModel(propRowSelectionModel);\n    if (newSelectionModel.type !== propRowSelectionModel.type || newSelectionModel.ids.size !== propRowSelectionModel.ids.size || !Array.from(propRowSelectionModel.ids).every(id => newSelectionModel.ids.has(id))) {\n      apiRef.current.setRowSelectionModel(newSelectionModel);\n      return;\n    }\n    apiRef.current.setRowSelectionModel(propRowSelectionModel);\n  });\n  useGridEvent(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(() => removeOutdatedSelection(true)));\n  useGridEvent(apiRef, 'filteredRowsSet', runIfRowSelectionIsEnabled(() => removeOutdatedSelection()));\n  useGridEvent(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridEvent(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridEvent(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridEvent(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridEvent(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /*\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    syncControlledState();\n  }, [apiRef, propRowSelectionModel, props.rowSelection, syncControlledState]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection || typeof isRowSelectable !== 'function') {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = gridRowSelectionStateSelector(apiRef);\n    if (currentSelection.type !== 'include') {\n      return;\n    }\n    const selectableIds = new Set();\n    for (const id of currentSelection.ids) {\n      if (isRowSelectable(id)) {\n        selectableIds.add(id);\n      }\n    }\n    if (selectableIds.size < currentSelection.ids.size) {\n      apiRef.current.setRowSelectionModel({\n        type: currentSelection.type,\n        ids: selectableIds\n      });\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef);\n    if (!canHaveMultipleSelection && (currentSelection.type === 'include' && currentSelection.ids.size > 1 || currentSelection.type === 'exclude')) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel(emptyModel);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    runIfRowSelectionIsEnabled(removeOutdatedSelection);\n  }, [removeOutdatedSelection, runIfRowSelectionIsEnabled]);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    }\n  }, []);\n};","map":{"version":3,"names":["_extends","React","useEventCallback","GridSignature","useGridEvent","useGridApiMethod","useGridLogger","useGridSelector","gridRowsLookupSelector","gridRowMaximumTreeDepthSelector","gridRowNodeSelector","gridRowTreeSelector","gridRowSelectionManagerSelector","gridRowSelectionStateSelector","gridRowSelectionCountSelector","gridRowSelectionIdsSelector","gridFocusCellSelector","gridExpandedSortedRowIdsSelector","gridFilteredRowsLookupSelector","gridFilterModelSelector","gridQuickFilterValuesSelector","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GridCellModes","isKeyboardEvent","isNavigationKey","getVisibleRows","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridClasses","isEventTargetInPortal","isMultipleRowSelectionEnabled","findRowsToSelect","findRowsToDeselect","createRowSelectionManager","gridPaginatedVisibleSortedGridRowIdsSelector","emptyModel","type","ids","Set","rowSelectionStateInitializer","state","props","rowSelection","rowSelectionModel","useGridRowSelection","apiRef","logger","runIfRowSelectionIsEnabled","useCallback","callback","args","applyAutoSelection","signature","DataGrid","rowSelectionPropagation","parents","descendants","propRowSelectionModel","useMemo","lastRowToggled","useRef","current","registerControlState","stateId","propModel","propOnChange","onRowSelectionModelChange","stateSelector","changeEvent","checkboxSelection","disableRowSelectionOnClick","isRowSelectable","propIsRowSelectable","canHaveMultipleSelection","tree","isNestedData","expandMouseRowRangeSelection","id","endId","startId","isSelected","isRowSelected","visibleRowIds","startIndex","findIndex","rowId","endIndex","selectRowRange","getRowsToBeSelected","rowsToBeSelected","pagination","checkboxSelectionVisibleOnly","paginationMode","setRowSelectionModel","model","size","Error","join","currentModel","debug","setState","selectionManager","has","getRowParams","rowNode","getSelectedRows","selectRow","resetSelection","newSelectionModel","addRow","add","selectionModel","unselect","select","removeRow","isSelectionValid","selectRows","selectableIds","i","length","currentSelectionModel","Array","from","every","getPropagatedRowSelectionModel","inputSelectionModel","propagatedSelectionModel","getRow","allPagesRowIds","indexOf","start","end","rowsBetweenStartAndEnd","slice","selectionPublicApi","selectionPrivateApi","isFirstRender","removeOutdatedSelection","sortModelUpdated","currentSelection","rowsLookup","filteredRowsLookup","isNonExistent","filterMode","hasChanged","keepNonExistentRowsSelected","node","isAutoGenerated","children","childId","shouldReapplyPropagation","unfilteredSelectedRowIds","selectedRowIds","push","handleSingleRowSelection","event","hasCtrlKey","metaKey","ctrlKey","isMultipleSelectionDisabled","selectedRowsCount","shouldStaySelected","newSelectionState","handleRowClick","params","field","target","closest","cell","getAttribute","column","getColumn","shiftKey","preventSelectionOnShift","window","getSelection","removeAllRanges","handleRowSelectionCheckboxChange","nativeEvent","value","toggleAllRows","filterModel","quickFilterModel","hasFilters","items","handleHeaderSelectionCheckboxChange","handleCellKeyDown","getCellMode","Edit","key","focusCell","preventDefault","isNextRowSelected","newRowIndex","getRowIndexRelativeToVisibleRows","previousRowIndex","visibleRows","rows","String","fromCharCode","keyCode","syncControlledState","undefined","useEffect","isStateControlled"],"sources":["D:/2025/Calidad de Software/calidadMACG/Ejercicios/Ejercicio Jmeter-Selenium/frontend/node_modules/@mui/x-data-grid/esm/hooks/features/rowSelection/useGridRowSelection.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { GridSignature } from \"../../../constants/signature.js\";\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { useGridSelector } from \"../../utils/useGridSelector.js\";\nimport { gridRowsLookupSelector, gridRowMaximumTreeDepthSelector, gridRowNodeSelector, gridRowTreeSelector } from \"../rows/gridRowsSelector.js\";\nimport { gridRowSelectionManagerSelector, gridRowSelectionStateSelector, gridRowSelectionCountSelector, gridRowSelectionIdsSelector } from \"./gridRowSelectionSelector.js\";\nimport { gridFocusCellSelector } from \"../focus/gridFocusStateSelector.js\";\nimport { gridExpandedSortedRowIdsSelector, gridFilteredRowsLookupSelector, gridFilterModelSelector, gridQuickFilterValuesSelector } from \"../filter/gridFilterSelector.js\";\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from \"../../../colDef/index.js\";\nimport { GridCellModes } from \"../../../models/gridEditRowModel.js\";\nimport { isKeyboardEvent, isNavigationKey } from \"../../../utils/keyboardUtils.js\";\nimport { getVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from \"../../../internals/constants.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { isEventTargetInPortal } from \"../../../utils/domUtils.js\";\nimport { isMultipleRowSelectionEnabled, findRowsToSelect, findRowsToDeselect } from \"./utils.js\";\nimport { createRowSelectionManager } from \"../../../models/gridRowSelectionManager.js\";\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from \"../pagination/index.js\";\nconst emptyModel = {\n  type: 'include',\n  ids: new Set()\n};\nexport const rowSelectionStateInitializer = (state, props) => _extends({}, state, {\n  rowSelection: props.rowSelection ? props.rowSelectionModel ?? emptyModel : emptyModel\n});\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport const useGridRowSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = React.useCallback(callback => (...args) => {\n    if (props.rowSelection) {\n      callback(...args);\n    }\n  }, [props.rowSelection]);\n  const applyAutoSelection = props.signature !== GridSignature.DataGrid && (props.rowSelectionPropagation?.parents || props.rowSelectionPropagation?.descendants);\n  const propRowSelectionModel = React.useMemo(() => {\n    return props.rowSelectionModel;\n  }, [props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableRowSelectionOnClick,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = isMultipleRowSelectionEnabled(props);\n  const tree = useGridSelector(apiRef, gridRowTreeSelector);\n  const isNestedData = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector) > 1;\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    let endId = id;\n    const startId = lastRowToggled.current ?? id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  const getRowsToBeSelected = useEventCallback(() => {\n    const rowsToBeSelected = props.pagination && props.checkboxSelectionVisibleOnly && props.paginationMode === 'client' ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    return rowsToBeSelected;\n  });\n\n  /*\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === GridSignature.DataGrid && !canHaveMultipleSelection && (model.type !== 'include' || model.ids.size > 1)) {\n      throw new Error(['MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = gridRowSelectionStateSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : emptyModel\n      }));\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, canHaveMultipleSelection]);\n  const isRowSelected = React.useCallback(id => {\n    const selectionManager = gridRowSelectionManagerSelector(apiRef);\n    return selectionManager.has(id);\n  }, [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (props.rowSelection === false) {\n      return false;\n    }\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = gridRowNodeSelector(apiRef, id);\n    if (rowNode?.type === 'footer' || rowNode?.type === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, props.rowSelection, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => gridRowSelectionIdsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      const newSelectionModel = {\n        type: 'include',\n        ids: new Set()\n      };\n      const addRow = rowId => {\n        newSelectionModel.ids.add(rowId);\n      };\n      if (isSelected) {\n        addRow(id);\n        if (applyAutoSelection) {\n          findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n        }\n      }\n      apiRef.current.setRowSelectionModel(newSelectionModel);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selectionModel = gridRowSelectionStateSelector(apiRef);\n      const newSelectionModel = {\n        type: selectionModel.type,\n        ids: new Set(selectionModel.ids)\n      };\n      const selectionManager = createRowSelectionManager(newSelectionModel);\n      selectionManager.unselect(id);\n      const addRow = rowId => {\n        selectionManager.select(rowId);\n      };\n      const removeRow = rowId => {\n        selectionManager.unselect(rowId);\n      };\n      if (isSelected) {\n        addRow(id);\n        if (applyAutoSelection) {\n          findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n        }\n      } else if (applyAutoSelection) {\n        findRowsToDeselect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, removeRow);\n      }\n      const isSelectionValid = newSelectionModel.type === 'include' && newSelectionModel.ids.size < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelectionModel);\n      }\n    }\n  }, [apiRef, logger, applyAutoSelection, tree, props.rowSelectionPropagation?.descendants, props.rowSelectionPropagation?.parents, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    if (props.rowSelection === false) {\n      return;\n    }\n    const selectableIds = new Set();\n    for (let i = 0; i < ids.length; i += 1) {\n      const id = ids[i];\n      if (apiRef.current.isRowSelectable(id)) {\n        selectableIds.add(id);\n      }\n    }\n    const currentSelectionModel = gridRowSelectionStateSelector(apiRef);\n    let newSelectionModel;\n    if (resetSelection) {\n      newSelectionModel = {\n        type: 'include',\n        ids: selectableIds\n      };\n      if (isSelected) {\n        const selectionManager = createRowSelectionManager(newSelectionModel);\n        if (applyAutoSelection) {\n          const addRow = rowId => {\n            selectionManager.select(rowId);\n          };\n          for (const id of selectableIds) {\n            findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n          }\n        }\n      } else {\n        newSelectionModel.ids = new Set();\n      }\n      if (currentSelectionModel.type === newSelectionModel.type && newSelectionModel.ids.size === currentSelectionModel.ids.size && Array.from(newSelectionModel.ids).every(id => currentSelectionModel.ids.has(id))) {\n        return;\n      }\n    } else {\n      newSelectionModel = {\n        type: currentSelectionModel.type,\n        ids: new Set(currentSelectionModel.ids)\n      };\n      const selectionManager = createRowSelectionManager(newSelectionModel);\n      const addRow = rowId => {\n        selectionManager.select(rowId);\n      };\n      const removeRow = rowId => {\n        selectionManager.unselect(rowId);\n      };\n      for (const id of selectableIds) {\n        if (isSelected) {\n          selectionManager.select(id);\n          if (applyAutoSelection) {\n            findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n          }\n        } else {\n          removeRow(id);\n          if (applyAutoSelection) {\n            findRowsToDeselect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, removeRow);\n          }\n        }\n      }\n    }\n    const isSelectionValid = newSelectionModel.type === 'include' && newSelectionModel.ids.size < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelectionModel);\n    }\n  }, [logger, applyAutoSelection, canHaveMultipleSelection, apiRef, tree, props.rowSelectionPropagation?.descendants, props.rowSelectionPropagation?.parents, props.rowSelection]);\n  const getPropagatedRowSelectionModel = React.useCallback(inputSelectionModel => {\n    if (!isNestedData || !applyAutoSelection || inputSelectionModel.ids.size === 0 && inputSelectionModel.type === 'include') {\n      return inputSelectionModel;\n    }\n    const propagatedSelectionModel = {\n      type: inputSelectionModel.type,\n      ids: new Set(inputSelectionModel.ids)\n    };\n    const selectionManager = createRowSelectionManager(propagatedSelectionModel);\n    const addRow = rowId => {\n      selectionManager.select(rowId);\n    };\n    for (const id of inputSelectionModel.ids) {\n      findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow, selectionManager);\n    }\n    return propagatedSelectionModel;\n  }, [apiRef, tree, props.rowSelectionPropagation?.descendants, props.rowSelectionPropagation?.parents, isNestedData, applyAutoSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange,\n    getPropagatedRowSelectionModel\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /*\n   * EVENTS\n   */\n  const isFirstRender = React.useRef(true);\n  const removeOutdatedSelection = React.useCallback((sortModelUpdated = false) => {\n    if (isFirstRender.current) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef);\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n    const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n    const isNonExistent = id => {\n      if (props.filterMode === 'server') {\n        return !rowsLookup[id];\n      }\n      return !rowsLookup[id] || filteredRowsLookup[id] === false;\n    };\n    const newSelectionModel = {\n      type: currentSelection.type,\n      ids: new Set(currentSelection.ids)\n    };\n    const selectionManager = createRowSelectionManager(newSelectionModel);\n    let hasChanged = false;\n    for (const id of currentSelection.ids) {\n      if (isNonExistent(id)) {\n        if (props.keepNonExistentRowsSelected) {\n          continue;\n        }\n        selectionManager.unselect(id);\n        hasChanged = true;\n        continue;\n      }\n      if (!props.rowSelectionPropagation?.parents) {\n        continue;\n      }\n      const node = tree[id];\n      if (node?.type === 'group') {\n        const isAutoGenerated = node.isAutoGenerated;\n        if (isAutoGenerated) {\n          selectionManager.unselect(id);\n          hasChanged = true;\n          continue;\n        }\n        // Keep previously selected tree data parents selected if all their children are filtered out\n        if (!node.children.every(childId => filteredRowsLookup[childId] === false)) {\n          selectionManager.unselect(id);\n          hasChanged = true;\n        }\n      }\n    }\n\n    // For nested data, on row tree updation (filtering, adding rows, etc.) when the selection is\n    // not empty, we need to re-run scanning of the tree to propagate the selection changes\n    // Example: A parent whose de-selected children are filtered out should now be selected\n    const shouldReapplyPropagation = isNestedData && props.rowSelectionPropagation?.parents && (newSelectionModel.ids.size > 0 ||\n    // In case of exclude selection, newSelectionModel.ids.size === 0 means all rows are selected\n    newSelectionModel.type === 'exclude');\n    if (hasChanged || shouldReapplyPropagation && !sortModelUpdated) {\n      if (shouldReapplyPropagation) {\n        if (newSelectionModel.type === 'exclude') {\n          const unfilteredSelectedRowIds = getRowsToBeSelected();\n          const selectedRowIds = [];\n          for (let i = 0; i < unfilteredSelectedRowIds.length; i += 1) {\n            const rowId = unfilteredSelectedRowIds[i];\n            if ((props.keepNonExistentRowsSelected || !isNonExistent(rowId)) && selectionManager.has(rowId)) {\n              selectedRowIds.push(rowId);\n            }\n          }\n          apiRef.current.selectRows(selectedRowIds, true, true);\n        } else {\n          apiRef.current.selectRows(Array.from(newSelectionModel.ids), true, true);\n        }\n      } else {\n        apiRef.current.setRowSelectionModel(newSelectionModel);\n      }\n    }\n  }, [apiRef, isNestedData, props.rowSelectionPropagation?.parents, props.keepNonExistentRowsSelected, props.filterMode, tree, getRowsToBeSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    const selectedRowsCount = gridRowSelectionCountSelector(apiRef);\n\n    // Clicking on a row should toggle the selection except when a range of rows is already selected and the selection should reset\n    // In that case, we want to keep the current row selected (https://github.com/mui/mui-x/pull/15509#discussion_r1878082687)\n    const shouldStaySelected = selectedRowsCount > 1 && resetSelection;\n    const newSelectionState = shouldStaySelected || !isSelected;\n    apiRef.current.selectRow(id, newSelectionState, resetSelection);\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = event.target.closest(`.${gridClasses.cell}`)?.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if (column?.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = gridRowNodeSelector(apiRef, params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && canHaveMultipleSelection) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      window.getSelection()?.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value, !canHaveMultipleSelection);\n    }\n  }, [apiRef, expandMouseRowRangeSelection, canHaveMultipleSelection]);\n  const toggleAllRows = React.useCallback(value => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const quickFilterModel = gridQuickFilterValuesSelector(apiRef);\n    const hasFilters = filterModel.items.length > 0 || (quickFilterModel?.length || 0) > 0;\n    if (!props.isRowSelectable && !props.checkboxSelectionVisibleOnly && applyAutoSelection && !hasFilters) {\n      apiRef.current.setRowSelectionModel({\n        type: value ? 'exclude' : 'include',\n        ids: new Set()\n      });\n    } else {\n      apiRef.current.selectRows(getRowsToBeSelected(), value);\n    }\n  }, [apiRef, applyAutoSelection, getRowsToBeSelected, props.checkboxSelectionVisibleOnly, props.isRowSelectable]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    toggleAllRows(params.value);\n  }, [toggleAllRows]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const visibleRows = getVisibleRows(apiRef);\n        const rowsBetweenStartAndEnd = [];\n        for (let i = start; i <= end; i += 1) {\n          rowsBetweenStartAndEnd.push(visibleRows.rows[i].id);\n        }\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (String.fromCharCode(event.keyCode) === 'A' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      toggleAllRows(true);\n    }\n  }, [apiRef, canHaveMultipleSelection, handleSingleRowSelection, toggleAllRows]);\n  const syncControlledState = useEventCallback(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel(emptyModel);\n      return;\n    }\n    if (propRowSelectionModel === undefined) {\n      return;\n    }\n    if (!applyAutoSelection || !isNestedData || propRowSelectionModel.type === 'include' && propRowSelectionModel.ids.size === 0) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n      return;\n    }\n    const newSelectionModel = apiRef.current.getPropagatedRowSelectionModel(propRowSelectionModel);\n    if (newSelectionModel.type !== propRowSelectionModel.type || newSelectionModel.ids.size !== propRowSelectionModel.ids.size || !Array.from(propRowSelectionModel.ids).every(id => newSelectionModel.ids.has(id))) {\n      apiRef.current.setRowSelectionModel(newSelectionModel);\n      return;\n    }\n    apiRef.current.setRowSelectionModel(propRowSelectionModel);\n  });\n  useGridEvent(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(() => removeOutdatedSelection(true)));\n  useGridEvent(apiRef, 'filteredRowsSet', runIfRowSelectionIsEnabled(() => removeOutdatedSelection()));\n  useGridEvent(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridEvent(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridEvent(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridEvent(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridEvent(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /*\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    syncControlledState();\n  }, [apiRef, propRowSelectionModel, props.rowSelection, syncControlledState]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection || typeof isRowSelectable !== 'function') {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = gridRowSelectionStateSelector(apiRef);\n    if (currentSelection.type !== 'include') {\n      return;\n    }\n    const selectableIds = new Set();\n    for (const id of currentSelection.ids) {\n      if (isRowSelectable(id)) {\n        selectableIds.add(id);\n      }\n    }\n    if (selectableIds.size < currentSelection.ids.size) {\n      apiRef.current.setRowSelectionModel({\n        type: currentSelection.type,\n        ids: selectableIds\n      });\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef);\n    if (!canHaveMultipleSelection && (currentSelection.type === 'include' && currentSelection.ids.size > 1 || currentSelection.type === 'exclude')) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel(emptyModel);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    runIfRowSelectionIsEnabled(removeOutdatedSelection);\n  }, [removeOutdatedSelection, runIfRowSelectionIsEnabled]);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    }\n  }, []);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}