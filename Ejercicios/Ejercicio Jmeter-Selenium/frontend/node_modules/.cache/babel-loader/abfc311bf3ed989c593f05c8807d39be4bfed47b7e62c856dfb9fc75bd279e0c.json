{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { styled } from '@mui/system';\nimport composeClasses from '@mui/utils/composeClasses';\nimport clsx from 'clsx';\nimport { minimalContentHeight } from \"../../hooks/features/rows/gridRowsUtils.js\";\nimport { useGridSelector } from \"../../hooks/utils/useGridSelector.js\";\nimport { gridDimensionsSelector } from \"../../hooks/features/dimensions/index.js\";\nimport { useGridApiContext } from \"../../hooks/utils/useGridApiContext.js\";\nimport { useGridRootProps } from \"../../hooks/utils/useGridRootProps.js\";\nimport { getDataGridUtilityClass } from \"../../constants/gridClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst GridOverlayWrapperRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'OverlayWrapper',\n  shouldForwardProp: prop => prop !== 'overlayType' && prop !== 'loadingOverlayVariant' && prop !== 'right'\n})(({\n  overlayType,\n  loadingOverlayVariant,\n  right\n}) =>\n// Skeleton overlay should flow with the scroll container and not be sticky\nloadingOverlayVariant !== 'skeleton' ? {\n  position: 'sticky',\n  // To stay in place while scrolling\n  top: 'var(--DataGrid-headersTotalHeight)',\n  // TODO: take pinned rows into account\n  left: 0,\n  right: `${right}px`,\n  width: 0,\n  // To stay above the content instead of shifting it down\n  height: 0,\n  // To stay above the content instead of shifting it down\n  zIndex: overlayType === 'loadingOverlay' ? 5 // Should be above pinned columns, pinned rows, and detail panel\n  : 4 // Should be above pinned columns and detail panel\n} : {});\nconst GridOverlayWrapperInner = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'OverlayWrapperInner',\n  shouldForwardProp: prop => prop !== 'overlayType' && prop !== 'loadingOverlayVariant'\n})({});\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['overlayWrapper'],\n    inner: ['overlayWrapperInner']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nexport function GridOverlayWrapper(props) {\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\n  let height = Math.max(dimensions.viewportOuterSize.height - dimensions.topContainerHeight - dimensions.bottomContainerHeight - (dimensions.hasScrollX ? dimensions.scrollbarSize : 0), 0);\n  if (height === 0) {\n    height = minimalContentHeight;\n  }\n  const classes = useUtilityClasses(_extends({}, props, {\n    classes: rootProps.classes\n  }));\n  return /*#__PURE__*/_jsx(GridOverlayWrapperRoot, _extends({\n    className: clsx(classes.root)\n  }, props, {\n    right: dimensions.columnsTotalWidth - dimensions.viewportOuterSize.width,\n    children: /*#__PURE__*/_jsx(GridOverlayWrapperInner, _extends({\n      className: clsx(classes.inner),\n      style: {\n        height,\n        width: dimensions.viewportOuterSize.width\n      }\n    }, props))\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridOverlayWrapper.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  loadingOverlayVariant: PropTypes.oneOf(['circular-progress', 'linear-progress', 'skeleton']),\n  overlayType: PropTypes.oneOf(['loadingOverlay', 'noResultsOverlay', 'noRowsOverlay', 'noColumnsOverlay', 'emptyPivotOverlay'])\n} : void 0;","map":{"version":3,"names":["_extends","React","PropTypes","styled","composeClasses","clsx","minimalContentHeight","useGridSelector","gridDimensionsSelector","useGridApiContext","useGridRootProps","getDataGridUtilityClass","jsx","_jsx","GridOverlayWrapperRoot","name","slot","shouldForwardProp","prop","overlayType","loadingOverlayVariant","right","position","top","left","width","height","zIndex","GridOverlayWrapperInner","useUtilityClasses","ownerState","classes","slots","root","inner","GridOverlayWrapper","props","apiRef","rootProps","dimensions","Math","max","viewportOuterSize","topContainerHeight","bottomContainerHeight","hasScrollX","scrollbarSize","className","columnsTotalWidth","children","style","process","env","NODE_ENV","propTypes","oneOf"],"sources":["D:/2025/Calidad de Software/calidadMACG/Ejercicios/Ejercicio Jmeter-Selenium/frontend/node_modules/@mui/x-data-grid/esm/components/base/GridOverlays.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { styled } from '@mui/system';\nimport composeClasses from '@mui/utils/composeClasses';\nimport clsx from 'clsx';\nimport { minimalContentHeight } from \"../../hooks/features/rows/gridRowsUtils.js\";\nimport { useGridSelector } from \"../../hooks/utils/useGridSelector.js\";\nimport { gridDimensionsSelector } from \"../../hooks/features/dimensions/index.js\";\nimport { useGridApiContext } from \"../../hooks/utils/useGridApiContext.js\";\nimport { useGridRootProps } from \"../../hooks/utils/useGridRootProps.js\";\nimport { getDataGridUtilityClass } from \"../../constants/gridClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst GridOverlayWrapperRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'OverlayWrapper',\n  shouldForwardProp: prop => prop !== 'overlayType' && prop !== 'loadingOverlayVariant' && prop !== 'right'\n})(({\n  overlayType,\n  loadingOverlayVariant,\n  right\n}) =>\n// Skeleton overlay should flow with the scroll container and not be sticky\nloadingOverlayVariant !== 'skeleton' ? {\n  position: 'sticky',\n  // To stay in place while scrolling\n  top: 'var(--DataGrid-headersTotalHeight)',\n  // TODO: take pinned rows into account\n  left: 0,\n  right: `${right}px`,\n  width: 0,\n  // To stay above the content instead of shifting it down\n  height: 0,\n  // To stay above the content instead of shifting it down\n  zIndex: overlayType === 'loadingOverlay' ? 5 // Should be above pinned columns, pinned rows, and detail panel\n  : 4 // Should be above pinned columns and detail panel\n} : {});\nconst GridOverlayWrapperInner = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'OverlayWrapperInner',\n  shouldForwardProp: prop => prop !== 'overlayType' && prop !== 'loadingOverlayVariant'\n})({});\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['overlayWrapper'],\n    inner: ['overlayWrapperInner']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nexport function GridOverlayWrapper(props) {\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\n  let height = Math.max(dimensions.viewportOuterSize.height - dimensions.topContainerHeight - dimensions.bottomContainerHeight - (dimensions.hasScrollX ? dimensions.scrollbarSize : 0), 0);\n  if (height === 0) {\n    height = minimalContentHeight;\n  }\n  const classes = useUtilityClasses(_extends({}, props, {\n    classes: rootProps.classes\n  }));\n  return /*#__PURE__*/_jsx(GridOverlayWrapperRoot, _extends({\n    className: clsx(classes.root)\n  }, props, {\n    right: dimensions.columnsTotalWidth - dimensions.viewportOuterSize.width,\n    children: /*#__PURE__*/_jsx(GridOverlayWrapperInner, _extends({\n      className: clsx(classes.inner),\n      style: {\n        height,\n        width: dimensions.viewportOuterSize.width\n      }\n    }, props))\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridOverlayWrapper.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  loadingOverlayVariant: PropTypes.oneOf(['circular-progress', 'linear-progress', 'skeleton']),\n  overlayType: PropTypes.oneOf(['loadingOverlay', 'noResultsOverlay', 'noRowsOverlay', 'noColumnsOverlay', 'emptyPivotOverlay'])\n} : void 0;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}