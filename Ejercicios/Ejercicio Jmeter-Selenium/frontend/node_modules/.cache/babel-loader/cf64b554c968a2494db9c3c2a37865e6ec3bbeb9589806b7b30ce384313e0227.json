{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport ownerDocument from '@mui/utils/ownerDocument';\nimport { throttle } from '@mui/x-internals/throttle';\nimport { isDeepEqual } from '@mui/x-internals/isDeepEqual';\nimport { useGridEventPriority } from \"../../utils/useGridEvent.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { createSelector } from \"../../../utils/createSelector.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridColumnPositionsSelector, gridVisibleColumnDefinitionsSelector, gridVisiblePinnedColumnDefinitionsSelector } from \"../columns/index.js\";\nimport { gridDimensionsSelector } from \"./gridDimensionsSelectors.js\";\nimport { gridDensityFactorSelector } from \"../density/index.js\";\nimport { gridRenderContextSelector } from \"../virtualization/index.js\";\nimport { useGridSelector } from \"../../utils/index.js\";\nimport { getVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { gridRowsMetaSelector } from \"../rows/gridRowsMetaSelector.js\";\nimport { getValidRowHeight, rowHeightWarning } from \"../rows/gridRowsUtils.js\";\nimport { getTotalHeaderHeight } from \"../columns/gridColumnsUtils.js\";\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from \"../../../constants/dataGridPropsDefaultValues.js\";\nimport { roundToDecimalPlaces } from \"../../../utils/roundToDecimalPlaces.js\";\nimport { isJSDOM } from \"../../../utils/isJSDOM.js\";\nconst EMPTY_SIZE = {\n  width: 0,\n  height: 0\n};\nconst EMPTY_DIMENSIONS = {\n  isReady: false,\n  root: EMPTY_SIZE,\n  viewportOuterSize: EMPTY_SIZE,\n  viewportInnerSize: EMPTY_SIZE,\n  contentSize: EMPTY_SIZE,\n  minimumSize: EMPTY_SIZE,\n  hasScrollX: false,\n  hasScrollY: false,\n  scrollbarSize: 0,\n  headerHeight: 0,\n  groupHeaderHeight: 0,\n  headerFilterHeight: 0,\n  rowWidth: 0,\n  rowHeight: 0,\n  columnsTotalWidth: 0,\n  leftPinnedWidth: 0,\n  rightPinnedWidth: 0,\n  headersTotalHeight: 0,\n  topContainerHeight: 0,\n  bottomContainerHeight: 0\n};\nexport const dimensionsStateInitializer = (state, props, apiRef) => {\n  const dimensions = EMPTY_DIMENSIONS;\n  const density = gridDensityFactorSelector(apiRef);\n  return _extends({}, state, {\n    dimensions: _extends({}, dimensions, getStaticDimensions(props, apiRef, density, gridVisiblePinnedColumnDefinitionsSelector(apiRef)))\n  });\n};\nconst columnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {\n  const colCount = visibleColumns.length;\n  if (colCount === 0) {\n    return 0;\n  }\n  return roundToDecimalPlaces(positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth, 1);\n});\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const errorShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(EMPTY_SIZE);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, columnsTotalWidthSelector);\n  const isFirstSizing = React.useRef(true);\n  const {\n    rowHeight,\n    headerHeight,\n    groupHeaderHeight,\n    headerFilterHeight,\n    headersTotalHeight,\n    leftPinnedWidth,\n    rightPinnedWidth\n  } = getStaticDimensions(props, apiRef, densityFactor, pinnedColumns);\n  const getRootDimensions = React.useCallback(() => gridDimensionsSelector(apiRef), [apiRef]);\n  const setDimensions = React.useCallback(dimensions => {\n    apiRef.current.setState(state => _extends({}, state, {\n      dimensions\n    }));\n    if (apiRef.current.rootElementRef.current) {\n      setCSSVariables(apiRef.current.rootElementRef.current, gridDimensionsSelector(apiRef));\n    }\n  }, [apiRef]);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = gridDimensionsSelector(apiRef);\n    if (!dimensions.isReady) {\n      return 0;\n    }\n    const currentPage = getVisibleRows(apiRef);\n\n    // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n    if (props.getRowHeight) {\n      const renderContext = gridRenderContextSelector(apiRef);\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.getRowHeight, rowHeight]);\n  const updateDimensions = React.useCallback(() => {\n    if (isFirstSizing.current) {\n      return;\n    }\n    // All the floating point dimensions should be rounded to .1 decimal places to avoid subpixel rendering issues\n    // https://github.com/mui/mui-x/issues/9550#issuecomment-1619020477\n    // https://github.com/mui/mui-x/issues/15721\n    const scrollbarSize = measureScrollbarSize(apiRef.current.mainElementRef.current, props.scrollbarSize);\n    const rowsMeta = gridRowsMetaSelector(apiRef);\n    const topContainerHeight = headersTotalHeight + rowsMeta.pinnedTopRowsTotalHeight;\n    const bottomContainerHeight = rowsMeta.pinnedBottomRowsTotalHeight;\n    const contentSize = {\n      width: columnsTotalWidth,\n      height: roundToDecimalPlaces(rowsMeta.currentPageTotalHeight, 1)\n    };\n    let viewportOuterSize;\n    let viewportInnerSize;\n    let hasScrollX = false;\n    let hasScrollY = false;\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > Math.round(rootDimensionsRef.current.width);\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: topContainerHeight + bottomContainerHeight + contentSize.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width - (hasScrollY ? scrollbarSize : 0)),\n        height: Math.max(0, viewportOuterSize.height - (hasScrollX ? scrollbarSize : 0))\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width),\n        height: Math.max(0, viewportOuterSize.height - topContainerHeight - bottomContainerHeight)\n      };\n      const content = contentSize;\n      const container = viewportInnerSize;\n      const hasScrollXIfNoYScrollBar = content.width > container.width;\n      const hasScrollYIfNoXScrollBar = content.height > container.height;\n      if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n        hasScrollY = hasScrollYIfNoXScrollBar;\n        hasScrollX = content.width + (hasScrollY ? scrollbarSize : 0) > container.width;\n\n        // We recalculate the scroll y to consider the size of the x scrollbar.\n        if (hasScrollX) {\n          hasScrollY = content.height + scrollbarSize > container.height;\n        }\n      }\n      if (hasScrollY) {\n        viewportInnerSize.width -= scrollbarSize;\n      }\n      if (hasScrollX) {\n        viewportInnerSize.height -= scrollbarSize;\n      }\n    }\n    const rowWidth = Math.max(viewportOuterSize.width, columnsTotalWidth + (hasScrollY ? scrollbarSize : 0));\n    const minimumSize = {\n      width: columnsTotalWidth,\n      height: topContainerHeight + contentSize.height + bottomContainerHeight\n    };\n    const newDimensions = {\n      isReady: true,\n      root: rootDimensionsRef.current,\n      viewportOuterSize,\n      viewportInnerSize,\n      contentSize,\n      minimumSize,\n      hasScrollX,\n      hasScrollY,\n      scrollbarSize,\n      headerHeight,\n      groupHeaderHeight,\n      headerFilterHeight,\n      rowWidth,\n      rowHeight,\n      columnsTotalWidth,\n      leftPinnedWidth,\n      rightPinnedWidth,\n      headersTotalHeight,\n      topContainerHeight,\n      bottomContainerHeight\n    };\n    const prevDimensions = apiRef.current.state.dimensions;\n    if (isDeepEqual(prevDimensions, newDimensions)) {\n      return;\n    }\n    setDimensions(newDimensions);\n    if (!areElementSizesEqual(newDimensions.viewportInnerSize, prevDimensions.viewportInnerSize)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newDimensions.viewportInnerSize);\n    }\n    apiRef.current.updateRenderContext?.();\n  }, [apiRef, setDimensions, props.scrollbarSize, props.autoHeight, rowHeight, headerHeight, groupHeaderHeight, headerFilterHeight, columnsTotalWidth, headersTotalHeight, leftPinnedWidth, rightPinnedWidth]);\n  const updateDimensionCallback = useEventCallback(updateDimensions);\n  const debouncedUpdateDimensions = React.useMemo(() => props.resizeThrottleMs > 0 ? throttle(() => {\n    updateDimensionCallback();\n    apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n  }, props.resizeThrottleMs) : undefined, [apiRef, props.resizeThrottleMs, updateDimensionCallback]);\n  React.useEffect(() => debouncedUpdateDimensions?.clear, [debouncedUpdateDimensions]);\n  const apiPublic = {\n    getRootDimensions\n  };\n  const apiPrivate = {\n    updateDimensions,\n    getViewportPageSize\n  };\n  useEnhancedEffect(updateDimensions, [updateDimensions]);\n  useGridApiMethod(apiRef, apiPublic, 'public');\n  useGridApiMethod(apiRef, apiPrivate, 'private');\n  const handleRootMount = React.useCallback(root => {\n    setCSSVariables(root, gridDimensionsSelector(apiRef));\n  }, [apiRef]);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size;\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the Data Grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the Data Grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (isFirstSizing.current || !debouncedUpdateDimensions) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      isFirstSizing.current = false;\n      updateDimensions();\n      return;\n    }\n    debouncedUpdateDimensions();\n  }, [updateDimensions, props.autoHeight, debouncedUpdateDimensions, logger]);\n  useGridEventPriority(apiRef, 'rootMount', handleRootMount);\n  useGridEventPriority(apiRef, 'resize', handleResize);\n  useGridEventPriority(apiRef, 'debouncedResize', props.onResize);\n}\nfunction setCSSVariables(root, dimensions) {\n  const set = (k, v) => root.style.setProperty(k, v);\n  set('--DataGrid-hasScrollX', `${Number(dimensions.hasScrollX)}`);\n  set('--DataGrid-hasScrollY', `${Number(dimensions.hasScrollY)}`);\n  set('--DataGrid-scrollbarSize', `${dimensions.scrollbarSize}px`);\n  set('--DataGrid-rowWidth', `${dimensions.rowWidth}px`);\n  set('--DataGrid-columnsTotalWidth', `${dimensions.columnsTotalWidth}px`);\n  set('--DataGrid-leftPinnedWidth', `${dimensions.leftPinnedWidth}px`);\n  set('--DataGrid-rightPinnedWidth', `${dimensions.rightPinnedWidth}px`);\n  set('--DataGrid-headerHeight', `${dimensions.headerHeight}px`);\n  set('--DataGrid-headersTotalHeight', `${dimensions.headersTotalHeight}px`);\n  set('--DataGrid-topContainerHeight', `${dimensions.topContainerHeight}px`);\n  set('--DataGrid-bottomContainerHeight', `${dimensions.bottomContainerHeight}px`);\n  set('--height', `${dimensions.rowHeight}px`);\n}\nfunction getStaticDimensions(props, apiRef, density, pinnedColumnns) {\n  const validRowHeight = getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  return {\n    rowHeight: Math.floor(validRowHeight * density),\n    headerHeight: Math.floor(props.columnHeaderHeight * density),\n    groupHeaderHeight: Math.floor((props.columnGroupHeaderHeight ?? props.columnHeaderHeight) * density),\n    headerFilterHeight: Math.floor((props.headerFilterHeight ?? props.columnHeaderHeight) * density),\n    columnsTotalWidth: columnsTotalWidthSelector(apiRef),\n    headersTotalHeight: getTotalHeaderHeight(apiRef, props),\n    leftPinnedWidth: pinnedColumnns.left.reduce((w, col) => w + col.computedWidth, 0),\n    rightPinnedWidth: pinnedColumnns.right.reduce((w, col) => w + col.computedWidth, 0)\n  };\n}\nconst scrollbarSizeCache = new WeakMap();\nfunction measureScrollbarSize(element, scrollbarSize) {\n  if (scrollbarSize !== undefined) {\n    return scrollbarSize;\n  }\n  if (element === null) {\n    return 0;\n  }\n  const cachedSize = scrollbarSizeCache.get(element);\n  if (cachedSize !== undefined) {\n    return cachedSize;\n  }\n  const doc = ownerDocument(element);\n  const scrollDiv = doc.createElement('div');\n  scrollDiv.style.width = '99px';\n  scrollDiv.style.height = '99px';\n  scrollDiv.style.position = 'absolute';\n  scrollDiv.style.overflow = 'scroll';\n  scrollDiv.className = 'scrollDiv';\n  element.appendChild(scrollDiv);\n  const size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  element.removeChild(scrollDiv);\n  scrollbarSizeCache.set(element, size);\n  return size;\n}\nfunction areElementSizesEqual(a, b) {\n  return a.width === b.width && a.height === b.height;\n}","map":{"version":3,"names":["_extends","React","useEventCallback","useEnhancedEffect","ownerDocument","throttle","isDeepEqual","useGridEventPriority","useGridApiMethod","createSelector","useGridLogger","gridColumnPositionsSelector","gridVisibleColumnDefinitionsSelector","gridVisiblePinnedColumnDefinitionsSelector","gridDimensionsSelector","gridDensityFactorSelector","gridRenderContextSelector","useGridSelector","getVisibleRows","gridRowsMetaSelector","getValidRowHeight","rowHeightWarning","getTotalHeaderHeight","DATA_GRID_PROPS_DEFAULT_VALUES","roundToDecimalPlaces","isJSDOM","EMPTY_SIZE","width","height","EMPTY_DIMENSIONS","isReady","root","viewportOuterSize","viewportInnerSize","contentSize","minimumSize","hasScrollX","hasScrollY","scrollbarSize","headerHeight","groupHeaderHeight","headerFilterHeight","rowWidth","rowHeight","columnsTotalWidth","leftPinnedWidth","rightPinnedWidth","headersTotalHeight","topContainerHeight","bottomContainerHeight","dimensionsStateInitializer","state","props","apiRef","dimensions","density","getStaticDimensions","columnsTotalWidthSelector","visibleColumns","positions","colCount","length","computedWidth","useGridDimensions","logger","errorShown","useRef","rootDimensionsRef","pinnedColumns","densityFactor","isFirstSizing","getRootDimensions","useCallback","setDimensions","current","setState","rootElementRef","setCSSVariables","getViewportPageSize","currentPage","getRowHeight","renderContext","viewportPageSize","lastRowIndex","firstRowIndex","Math","min","rows","maximumPageSizeWithoutScrollBar","floor","updateDimensions","measureScrollbarSize","mainElementRef","rowsMeta","pinnedTopRowsTotalHeight","pinnedBottomRowsTotalHeight","currentPageTotalHeight","autoHeight","round","max","content","container","hasScrollXIfNoYScrollBar","hasScrollYIfNoXScrollBar","newDimensions","prevDimensions","areElementSizesEqual","publishEvent","updateRenderContext","updateDimensionCallback","debouncedUpdateDimensions","useMemo","resizeThrottleMs","undefined","useEffect","clear","apiPublic","apiPrivate","handleRootMount","handleResize","size","error","join","onResize","set","k","v","style","setProperty","Number","pinnedColumnns","validRowHeight","columnHeaderHeight","columnGroupHeaderHeight","left","reduce","w","col","right","scrollbarSizeCache","WeakMap","element","cachedSize","get","doc","scrollDiv","createElement","position","overflow","className","appendChild","offsetWidth","clientWidth","removeChild","a","b"],"sources":["D:/2025/Calidad de Software/calidadMACG/Ejercicios/Ejercicio Jmeter-Selenium/frontend/node_modules/@mui/x-data-grid/esm/hooks/features/dimensions/useGridDimensions.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport ownerDocument from '@mui/utils/ownerDocument';\nimport { throttle } from '@mui/x-internals/throttle';\nimport { isDeepEqual } from '@mui/x-internals/isDeepEqual';\nimport { useGridEventPriority } from \"../../utils/useGridEvent.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { createSelector } from \"../../../utils/createSelector.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridColumnPositionsSelector, gridVisibleColumnDefinitionsSelector, gridVisiblePinnedColumnDefinitionsSelector } from \"../columns/index.js\";\nimport { gridDimensionsSelector } from \"./gridDimensionsSelectors.js\";\nimport { gridDensityFactorSelector } from \"../density/index.js\";\nimport { gridRenderContextSelector } from \"../virtualization/index.js\";\nimport { useGridSelector } from \"../../utils/index.js\";\nimport { getVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { gridRowsMetaSelector } from \"../rows/gridRowsMetaSelector.js\";\nimport { getValidRowHeight, rowHeightWarning } from \"../rows/gridRowsUtils.js\";\nimport { getTotalHeaderHeight } from \"../columns/gridColumnsUtils.js\";\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from \"../../../constants/dataGridPropsDefaultValues.js\";\nimport { roundToDecimalPlaces } from \"../../../utils/roundToDecimalPlaces.js\";\nimport { isJSDOM } from \"../../../utils/isJSDOM.js\";\nconst EMPTY_SIZE = {\n  width: 0,\n  height: 0\n};\nconst EMPTY_DIMENSIONS = {\n  isReady: false,\n  root: EMPTY_SIZE,\n  viewportOuterSize: EMPTY_SIZE,\n  viewportInnerSize: EMPTY_SIZE,\n  contentSize: EMPTY_SIZE,\n  minimumSize: EMPTY_SIZE,\n  hasScrollX: false,\n  hasScrollY: false,\n  scrollbarSize: 0,\n  headerHeight: 0,\n  groupHeaderHeight: 0,\n  headerFilterHeight: 0,\n  rowWidth: 0,\n  rowHeight: 0,\n  columnsTotalWidth: 0,\n  leftPinnedWidth: 0,\n  rightPinnedWidth: 0,\n  headersTotalHeight: 0,\n  topContainerHeight: 0,\n  bottomContainerHeight: 0\n};\nexport const dimensionsStateInitializer = (state, props, apiRef) => {\n  const dimensions = EMPTY_DIMENSIONS;\n  const density = gridDensityFactorSelector(apiRef);\n  return _extends({}, state, {\n    dimensions: _extends({}, dimensions, getStaticDimensions(props, apiRef, density, gridVisiblePinnedColumnDefinitionsSelector(apiRef)))\n  });\n};\nconst columnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {\n  const colCount = visibleColumns.length;\n  if (colCount === 0) {\n    return 0;\n  }\n  return roundToDecimalPlaces(positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth, 1);\n});\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const errorShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(EMPTY_SIZE);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, columnsTotalWidthSelector);\n  const isFirstSizing = React.useRef(true);\n  const {\n    rowHeight,\n    headerHeight,\n    groupHeaderHeight,\n    headerFilterHeight,\n    headersTotalHeight,\n    leftPinnedWidth,\n    rightPinnedWidth\n  } = getStaticDimensions(props, apiRef, densityFactor, pinnedColumns);\n  const getRootDimensions = React.useCallback(() => gridDimensionsSelector(apiRef), [apiRef]);\n  const setDimensions = React.useCallback(dimensions => {\n    apiRef.current.setState(state => _extends({}, state, {\n      dimensions\n    }));\n    if (apiRef.current.rootElementRef.current) {\n      setCSSVariables(apiRef.current.rootElementRef.current, gridDimensionsSelector(apiRef));\n    }\n  }, [apiRef]);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = gridDimensionsSelector(apiRef);\n    if (!dimensions.isReady) {\n      return 0;\n    }\n    const currentPage = getVisibleRows(apiRef);\n\n    // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n    if (props.getRowHeight) {\n      const renderContext = gridRenderContextSelector(apiRef);\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.getRowHeight, rowHeight]);\n  const updateDimensions = React.useCallback(() => {\n    if (isFirstSizing.current) {\n      return;\n    }\n    // All the floating point dimensions should be rounded to .1 decimal places to avoid subpixel rendering issues\n    // https://github.com/mui/mui-x/issues/9550#issuecomment-1619020477\n    // https://github.com/mui/mui-x/issues/15721\n    const scrollbarSize = measureScrollbarSize(apiRef.current.mainElementRef.current, props.scrollbarSize);\n    const rowsMeta = gridRowsMetaSelector(apiRef);\n    const topContainerHeight = headersTotalHeight + rowsMeta.pinnedTopRowsTotalHeight;\n    const bottomContainerHeight = rowsMeta.pinnedBottomRowsTotalHeight;\n    const contentSize = {\n      width: columnsTotalWidth,\n      height: roundToDecimalPlaces(rowsMeta.currentPageTotalHeight, 1)\n    };\n    let viewportOuterSize;\n    let viewportInnerSize;\n    let hasScrollX = false;\n    let hasScrollY = false;\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > Math.round(rootDimensionsRef.current.width);\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: topContainerHeight + bottomContainerHeight + contentSize.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width - (hasScrollY ? scrollbarSize : 0)),\n        height: Math.max(0, viewportOuterSize.height - (hasScrollX ? scrollbarSize : 0))\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width),\n        height: Math.max(0, viewportOuterSize.height - topContainerHeight - bottomContainerHeight)\n      };\n      const content = contentSize;\n      const container = viewportInnerSize;\n      const hasScrollXIfNoYScrollBar = content.width > container.width;\n      const hasScrollYIfNoXScrollBar = content.height > container.height;\n      if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n        hasScrollY = hasScrollYIfNoXScrollBar;\n        hasScrollX = content.width + (hasScrollY ? scrollbarSize : 0) > container.width;\n\n        // We recalculate the scroll y to consider the size of the x scrollbar.\n        if (hasScrollX) {\n          hasScrollY = content.height + scrollbarSize > container.height;\n        }\n      }\n      if (hasScrollY) {\n        viewportInnerSize.width -= scrollbarSize;\n      }\n      if (hasScrollX) {\n        viewportInnerSize.height -= scrollbarSize;\n      }\n    }\n    const rowWidth = Math.max(viewportOuterSize.width, columnsTotalWidth + (hasScrollY ? scrollbarSize : 0));\n    const minimumSize = {\n      width: columnsTotalWidth,\n      height: topContainerHeight + contentSize.height + bottomContainerHeight\n    };\n    const newDimensions = {\n      isReady: true,\n      root: rootDimensionsRef.current,\n      viewportOuterSize,\n      viewportInnerSize,\n      contentSize,\n      minimumSize,\n      hasScrollX,\n      hasScrollY,\n      scrollbarSize,\n      headerHeight,\n      groupHeaderHeight,\n      headerFilterHeight,\n      rowWidth,\n      rowHeight,\n      columnsTotalWidth,\n      leftPinnedWidth,\n      rightPinnedWidth,\n      headersTotalHeight,\n      topContainerHeight,\n      bottomContainerHeight\n    };\n    const prevDimensions = apiRef.current.state.dimensions;\n    if (isDeepEqual(prevDimensions, newDimensions)) {\n      return;\n    }\n    setDimensions(newDimensions);\n    if (!areElementSizesEqual(newDimensions.viewportInnerSize, prevDimensions.viewportInnerSize)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newDimensions.viewportInnerSize);\n    }\n    apiRef.current.updateRenderContext?.();\n  }, [apiRef, setDimensions, props.scrollbarSize, props.autoHeight, rowHeight, headerHeight, groupHeaderHeight, headerFilterHeight, columnsTotalWidth, headersTotalHeight, leftPinnedWidth, rightPinnedWidth]);\n  const updateDimensionCallback = useEventCallback(updateDimensions);\n  const debouncedUpdateDimensions = React.useMemo(() => props.resizeThrottleMs > 0 ? throttle(() => {\n    updateDimensionCallback();\n    apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n  }, props.resizeThrottleMs) : undefined, [apiRef, props.resizeThrottleMs, updateDimensionCallback]);\n  React.useEffect(() => debouncedUpdateDimensions?.clear, [debouncedUpdateDimensions]);\n  const apiPublic = {\n    getRootDimensions\n  };\n  const apiPrivate = {\n    updateDimensions,\n    getViewportPageSize\n  };\n  useEnhancedEffect(updateDimensions, [updateDimensions]);\n  useGridApiMethod(apiRef, apiPublic, 'public');\n  useGridApiMethod(apiRef, apiPrivate, 'private');\n  const handleRootMount = React.useCallback(root => {\n    setCSSVariables(root, gridDimensionsSelector(apiRef));\n  }, [apiRef]);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size;\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the Data Grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the Data Grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (isFirstSizing.current || !debouncedUpdateDimensions) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      isFirstSizing.current = false;\n      updateDimensions();\n      return;\n    }\n    debouncedUpdateDimensions();\n  }, [updateDimensions, props.autoHeight, debouncedUpdateDimensions, logger]);\n  useGridEventPriority(apiRef, 'rootMount', handleRootMount);\n  useGridEventPriority(apiRef, 'resize', handleResize);\n  useGridEventPriority(apiRef, 'debouncedResize', props.onResize);\n}\nfunction setCSSVariables(root, dimensions) {\n  const set = (k, v) => root.style.setProperty(k, v);\n  set('--DataGrid-hasScrollX', `${Number(dimensions.hasScrollX)}`);\n  set('--DataGrid-hasScrollY', `${Number(dimensions.hasScrollY)}`);\n  set('--DataGrid-scrollbarSize', `${dimensions.scrollbarSize}px`);\n  set('--DataGrid-rowWidth', `${dimensions.rowWidth}px`);\n  set('--DataGrid-columnsTotalWidth', `${dimensions.columnsTotalWidth}px`);\n  set('--DataGrid-leftPinnedWidth', `${dimensions.leftPinnedWidth}px`);\n  set('--DataGrid-rightPinnedWidth', `${dimensions.rightPinnedWidth}px`);\n  set('--DataGrid-headerHeight', `${dimensions.headerHeight}px`);\n  set('--DataGrid-headersTotalHeight', `${dimensions.headersTotalHeight}px`);\n  set('--DataGrid-topContainerHeight', `${dimensions.topContainerHeight}px`);\n  set('--DataGrid-bottomContainerHeight', `${dimensions.bottomContainerHeight}px`);\n  set('--height', `${dimensions.rowHeight}px`);\n}\nfunction getStaticDimensions(props, apiRef, density, pinnedColumnns) {\n  const validRowHeight = getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  return {\n    rowHeight: Math.floor(validRowHeight * density),\n    headerHeight: Math.floor(props.columnHeaderHeight * density),\n    groupHeaderHeight: Math.floor((props.columnGroupHeaderHeight ?? props.columnHeaderHeight) * density),\n    headerFilterHeight: Math.floor((props.headerFilterHeight ?? props.columnHeaderHeight) * density),\n    columnsTotalWidth: columnsTotalWidthSelector(apiRef),\n    headersTotalHeight: getTotalHeaderHeight(apiRef, props),\n    leftPinnedWidth: pinnedColumnns.left.reduce((w, col) => w + col.computedWidth, 0),\n    rightPinnedWidth: pinnedColumnns.right.reduce((w, col) => w + col.computedWidth, 0)\n  };\n}\nconst scrollbarSizeCache = new WeakMap();\nfunction measureScrollbarSize(element, scrollbarSize) {\n  if (scrollbarSize !== undefined) {\n    return scrollbarSize;\n  }\n  if (element === null) {\n    return 0;\n  }\n  const cachedSize = scrollbarSizeCache.get(element);\n  if (cachedSize !== undefined) {\n    return cachedSize;\n  }\n  const doc = ownerDocument(element);\n  const scrollDiv = doc.createElement('div');\n  scrollDiv.style.width = '99px';\n  scrollDiv.style.height = '99px';\n  scrollDiv.style.position = 'absolute';\n  scrollDiv.style.overflow = 'scroll';\n  scrollDiv.className = 'scrollDiv';\n  element.appendChild(scrollDiv);\n  const size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  element.removeChild(scrollDiv);\n  scrollbarSizeCache.set(element, size);\n  return size;\n}\nfunction areElementSizesEqual(a, b) {\n  return a.width === b.width && a.height === b.height;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}