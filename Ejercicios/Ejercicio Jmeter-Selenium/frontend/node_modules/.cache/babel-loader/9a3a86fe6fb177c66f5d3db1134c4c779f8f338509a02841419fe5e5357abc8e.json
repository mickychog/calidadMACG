{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridSelector } from \"../../utils/index.js\";\nimport { useGridApiContext } from \"../../utils/useGridApiContext.js\";\nimport { useGridRootProps } from \"../../utils/useGridRootProps.js\";\nimport { gridExpandedRowCountSelector } from \"../filter/index.js\";\nimport { gridRowCountSelector, gridRowsLoadingSelector } from \"../rows/index.js\";\nimport { gridPinnedRowsCountSelector } from \"../rows/gridRowsSelector.js\";\nimport { GridOverlayWrapper } from \"../../../components/base/GridOverlays.js\";\nimport { gridVisibleColumnDefinitionsSelector } from \"../columns/index.js\";\nimport { gridPivotActiveSelector } from \"../pivoting/index.js\";\n\n/**\n * Uses the grid state to determine which overlay to display.\n * Returns the active overlay type and the active loading overlay variant.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useGridOverlays = () => {\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const visibleRowCount = useGridSelector(apiRef, gridExpandedRowCountSelector);\n  const pinnedRowsCount = useGridSelector(apiRef, gridPinnedRowsCountSelector);\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const noRows = totalRowCount === 0 && pinnedRowsCount === 0;\n  const loading = useGridSelector(apiRef, gridRowsLoadingSelector);\n  const pivotActive = useGridSelector(apiRef, gridPivotActiveSelector);\n  const showNoRowsOverlay = !loading && noRows;\n  const showNoResultsOverlay = !loading && totalRowCount > 0 && visibleRowCount === 0;\n  const showNoColumnsOverlay = !loading && visibleColumns.length === 0;\n  const showEmptyPivotOverlay = showNoRowsOverlay && pivotActive;\n  let overlayType = null;\n  let loadingOverlayVariant = null;\n  if (showNoRowsOverlay) {\n    overlayType = 'noRowsOverlay';\n  }\n  if (showNoColumnsOverlay) {\n    overlayType = 'noColumnsOverlay';\n  }\n  if (showEmptyPivotOverlay) {\n    overlayType = 'emptyPivotOverlay';\n  }\n  if (showNoResultsOverlay) {\n    overlayType = 'noResultsOverlay';\n  }\n  if (loading) {\n    overlayType = 'loadingOverlay';\n    loadingOverlayVariant = rootProps.slotProps?.loadingOverlay?.[noRows ? 'noRowsVariant' : 'variant'] ?? (noRows ? 'skeleton' : 'linear-progress');\n  }\n  const overlaysProps = {\n    overlayType: overlayType,\n    loadingOverlayVariant\n  };\n  const getOverlay = () => {\n    if (!overlayType) {\n      return null;\n    }\n    const Overlay = rootProps.slots?.[overlayType];\n    const overlayProps = rootProps.slotProps?.[overlayType];\n    return /*#__PURE__*/_jsx(GridOverlayWrapper, _extends({}, overlaysProps, {\n      children: /*#__PURE__*/_jsx(Overlay, _extends({}, overlayProps))\n    }));\n  };\n  return {\n    getOverlay,\n    overlaysProps\n  };\n};","map":{"version":3,"names":["_extends","React","useGridSelector","useGridApiContext","useGridRootProps","gridExpandedRowCountSelector","gridRowCountSelector","gridRowsLoadingSelector","gridPinnedRowsCountSelector","GridOverlayWrapper","gridVisibleColumnDefinitionsSelector","gridPivotActiveSelector","jsx","_jsx","useGridOverlays","apiRef","rootProps","totalRowCount","visibleRowCount","pinnedRowsCount","visibleColumns","noRows","loading","pivotActive","showNoRowsOverlay","showNoResultsOverlay","showNoColumnsOverlay","length","showEmptyPivotOverlay","overlayType","loadingOverlayVariant","slotProps","loadingOverlay","overlaysProps","getOverlay","Overlay","slots","overlayProps","children"],"sources":["D:/2025/Calidad de Software/calidadMACG/Ejercicios/Ejercicio Jmeter-Selenium/frontend/node_modules/@mui/x-data-grid/esm/hooks/features/overlays/useGridOverlays.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridSelector } from \"../../utils/index.js\";\nimport { useGridApiContext } from \"../../utils/useGridApiContext.js\";\nimport { useGridRootProps } from \"../../utils/useGridRootProps.js\";\nimport { gridExpandedRowCountSelector } from \"../filter/index.js\";\nimport { gridRowCountSelector, gridRowsLoadingSelector } from \"../rows/index.js\";\nimport { gridPinnedRowsCountSelector } from \"../rows/gridRowsSelector.js\";\nimport { GridOverlayWrapper } from \"../../../components/base/GridOverlays.js\";\nimport { gridVisibleColumnDefinitionsSelector } from \"../columns/index.js\";\nimport { gridPivotActiveSelector } from \"../pivoting/index.js\";\n\n/**\n * Uses the grid state to determine which overlay to display.\n * Returns the active overlay type and the active loading overlay variant.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useGridOverlays = () => {\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const visibleRowCount = useGridSelector(apiRef, gridExpandedRowCountSelector);\n  const pinnedRowsCount = useGridSelector(apiRef, gridPinnedRowsCountSelector);\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const noRows = totalRowCount === 0 && pinnedRowsCount === 0;\n  const loading = useGridSelector(apiRef, gridRowsLoadingSelector);\n  const pivotActive = useGridSelector(apiRef, gridPivotActiveSelector);\n  const showNoRowsOverlay = !loading && noRows;\n  const showNoResultsOverlay = !loading && totalRowCount > 0 && visibleRowCount === 0;\n  const showNoColumnsOverlay = !loading && visibleColumns.length === 0;\n  const showEmptyPivotOverlay = showNoRowsOverlay && pivotActive;\n  let overlayType = null;\n  let loadingOverlayVariant = null;\n  if (showNoRowsOverlay) {\n    overlayType = 'noRowsOverlay';\n  }\n  if (showNoColumnsOverlay) {\n    overlayType = 'noColumnsOverlay';\n  }\n  if (showEmptyPivotOverlay) {\n    overlayType = 'emptyPivotOverlay';\n  }\n  if (showNoResultsOverlay) {\n    overlayType = 'noResultsOverlay';\n  }\n  if (loading) {\n    overlayType = 'loadingOverlay';\n    loadingOverlayVariant = rootProps.slotProps?.loadingOverlay?.[noRows ? 'noRowsVariant' : 'variant'] ?? (noRows ? 'skeleton' : 'linear-progress');\n  }\n  const overlaysProps = {\n    overlayType: overlayType,\n    loadingOverlayVariant\n  };\n  const getOverlay = () => {\n    if (!overlayType) {\n      return null;\n    }\n    const Overlay = rootProps.slots?.[overlayType];\n    const overlayProps = rootProps.slotProps?.[overlayType];\n    return /*#__PURE__*/_jsx(GridOverlayWrapper, _extends({}, overlaysProps, {\n      children: /*#__PURE__*/_jsx(Overlay, _extends({}, overlayProps))\n    }));\n  };\n  return {\n    getOverlay,\n    overlaysProps\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}