{"ast":null,"code":"// Original source:\n// - https://github.com/reduxjs/reselect/blob/1c3fc05f041d32cd69c11a7f7deccf0bce6f4598/src/weakMapMemoize.ts\n\nclass StrongRef {\n  constructor(value) {\n    this.value = value;\n  }\n  deref() {\n    return this.value;\n  }\n}\nconst getWeakRef = () => typeof WeakRef === 'undefined' ? StrongRef : WeakRef;\nconst Ref = /** @__PURE__ */getWeakRef();\nconst UNTERMINATED = 0;\nconst TERMINATED = 1;\nfunction createCacheNode() {\n  return {\n    s: UNTERMINATED,\n    v: undefined,\n    o: null,\n    p: null\n  };\n}\n/**\n * Derefences the argument if it is a Ref. Else if it is a value already, return it.\n *\n * @param r - the object to maybe deref\n * @returns The derefenced value if the argument is a Ref, else the argument value itself.\n */\nfunction maybeDeref(r) {\n  if (r instanceof Ref) {\n    return r.deref();\n  }\n  return r;\n}\n\n/**\n * Inspired by the `weakMapMemoize` function from the `reselect` library.\n *\n * @see {@link https://github.com/reduxjs/reselect/blob/1c3fc05f041d32cd69c11a7f7deccf0bce6f4598/src/weakMapMemoize.ts `original source code`}\n * @see {@link https://reselect.js.org/api/weakMapMemoize `weakMapMemoize api docs`}\n */\nexport function weakMapMemoize(func, options = {}) {\n  let fnNode = createCacheNode();\n  const {\n    resultEqualityCheck\n  } = options;\n  let lastResult;\n  let resultsCount = 0;\n  function memoized() {\n    let cacheNode = fnNode;\n    // eslint-disable-next-line prefer-rest-params\n    const {\n      length\n    } = arguments;\n    for (let i = 0, l = length; i < l; i += 1) {\n      // eslint-disable-next-line prefer-rest-params\n      let arg = arguments[i];\n      if (typeof arg === 'function' || typeof arg === 'object' && arg !== null) {\n        // Following logic is added over the original `weakMapMemoize` to support the proper memoization of the `GridApiRef`\n        if ('current' in arg && 'instanceId' in arg.current) {\n          arg = arg.current.state;\n        }\n        // Objects go into a WeakMap\n        let objectCache = cacheNode.o;\n        if (objectCache === null) {\n          objectCache = new WeakMap();\n          cacheNode.o = objectCache;\n        }\n        const objectNode = objectCache.get(arg);\n        if (objectNode === undefined) {\n          cacheNode = createCacheNode();\n          objectCache.set(arg, cacheNode);\n        } else {\n          cacheNode = objectNode;\n        }\n      } else {\n        // Primitives go into a regular Map\n        let primitiveCache = cacheNode.p;\n        if (primitiveCache === null) {\n          primitiveCache = new Map();\n          cacheNode.p = primitiveCache;\n        }\n        const primitiveNode = primitiveCache.get(arg);\n        if (primitiveNode === undefined) {\n          cacheNode = createCacheNode();\n          primitiveCache.set(arg, cacheNode);\n        } else {\n          cacheNode = primitiveNode;\n        }\n      }\n    }\n    const terminatedNode = cacheNode;\n    let result;\n    if (cacheNode.s === TERMINATED) {\n      result = cacheNode.v;\n    } else {\n      // Allow errors to propagate\n      // eslint-disable-next-line prefer-spread, prefer-rest-params\n      result = func.apply(null, arguments);\n      resultsCount += 1;\n      if (resultEqualityCheck) {\n        // Deref lastResult if it is a Ref\n        const lastResultValue = maybeDeref(lastResult);\n        if (lastResultValue != null && resultEqualityCheck(lastResultValue, result)) {\n          result = lastResultValue;\n          if (resultsCount !== 0) {\n            resultsCount -= 1;\n          }\n        }\n        const needsWeakRef = typeof result === 'object' && result !== null || typeof result === 'function';\n        lastResult = needsWeakRef ? /** @__PURE__ */new Ref(result) : result;\n      }\n    }\n    terminatedNode.s = TERMINATED;\n    terminatedNode.v = result;\n    return result;\n  }\n  memoized.clearCache = () => {\n    fnNode = createCacheNode();\n    memoized.resetResultsCount();\n  };\n  memoized.resultsCount = () => resultsCount;\n  memoized.resetResultsCount = () => {\n    resultsCount = 0;\n  };\n  return memoized;\n}","map":{"version":3,"names":["StrongRef","constructor","value","deref","getWeakRef","WeakRef","Ref","UNTERMINATED","TERMINATED","createCacheNode","s","v","undefined","o","p","maybeDeref","r","weakMapMemoize","func","options","fnNode","resultEqualityCheck","lastResult","resultsCount","memoized","cacheNode","length","arguments","i","l","arg","current","state","objectCache","WeakMap","objectNode","get","set","primitiveCache","Map","primitiveNode","terminatedNode","result","apply","lastResultValue","needsWeakRef","clearCache","resetResultsCount"],"sources":["D:/2025/Calidad de Software/calidadMACG/Ejercicios/Ejercicio Jmeter-Selenium/frontend/node_modules/@mui/x-data-grid/esm/utils/weakMapMemoize.js"],"sourcesContent":["// Original source:\n// - https://github.com/reduxjs/reselect/blob/1c3fc05f041d32cd69c11a7f7deccf0bce6f4598/src/weakMapMemoize.ts\n\nclass StrongRef {\n  constructor(value) {\n    this.value = value;\n  }\n  deref() {\n    return this.value;\n  }\n}\nconst getWeakRef = () => typeof WeakRef === 'undefined' ? StrongRef : WeakRef;\nconst Ref = /** @__PURE__ */getWeakRef();\nconst UNTERMINATED = 0;\nconst TERMINATED = 1;\nfunction createCacheNode() {\n  return {\n    s: UNTERMINATED,\n    v: undefined,\n    o: null,\n    p: null\n  };\n}\n/**\n * Derefences the argument if it is a Ref. Else if it is a value already, return it.\n *\n * @param r - the object to maybe deref\n * @returns The derefenced value if the argument is a Ref, else the argument value itself.\n */\nfunction maybeDeref(r) {\n  if (r instanceof Ref) {\n    return r.deref();\n  }\n  return r;\n}\n\n/**\n * Inspired by the `weakMapMemoize` function from the `reselect` library.\n *\n * @see {@link https://github.com/reduxjs/reselect/blob/1c3fc05f041d32cd69c11a7f7deccf0bce6f4598/src/weakMapMemoize.ts `original source code`}\n * @see {@link https://reselect.js.org/api/weakMapMemoize `weakMapMemoize api docs`}\n */\nexport function weakMapMemoize(func, options = {}) {\n  let fnNode = createCacheNode();\n  const {\n    resultEqualityCheck\n  } = options;\n  let lastResult;\n  let resultsCount = 0;\n  function memoized() {\n    let cacheNode = fnNode;\n    // eslint-disable-next-line prefer-rest-params\n    const {\n      length\n    } = arguments;\n    for (let i = 0, l = length; i < l; i += 1) {\n      // eslint-disable-next-line prefer-rest-params\n      let arg = arguments[i];\n      if (typeof arg === 'function' || typeof arg === 'object' && arg !== null) {\n        // Following logic is added over the original `weakMapMemoize` to support the proper memoization of the `GridApiRef`\n        if ('current' in arg && 'instanceId' in arg.current) {\n          arg = arg.current.state;\n        }\n        // Objects go into a WeakMap\n        let objectCache = cacheNode.o;\n        if (objectCache === null) {\n          objectCache = new WeakMap();\n          cacheNode.o = objectCache;\n        }\n        const objectNode = objectCache.get(arg);\n        if (objectNode === undefined) {\n          cacheNode = createCacheNode();\n          objectCache.set(arg, cacheNode);\n        } else {\n          cacheNode = objectNode;\n        }\n      } else {\n        // Primitives go into a regular Map\n        let primitiveCache = cacheNode.p;\n        if (primitiveCache === null) {\n          primitiveCache = new Map();\n          cacheNode.p = primitiveCache;\n        }\n        const primitiveNode = primitiveCache.get(arg);\n        if (primitiveNode === undefined) {\n          cacheNode = createCacheNode();\n          primitiveCache.set(arg, cacheNode);\n        } else {\n          cacheNode = primitiveNode;\n        }\n      }\n    }\n    const terminatedNode = cacheNode;\n    let result;\n    if (cacheNode.s === TERMINATED) {\n      result = cacheNode.v;\n    } else {\n      // Allow errors to propagate\n      // eslint-disable-next-line prefer-spread, prefer-rest-params\n      result = func.apply(null, arguments);\n      resultsCount += 1;\n      if (resultEqualityCheck) {\n        // Deref lastResult if it is a Ref\n        const lastResultValue = maybeDeref(lastResult);\n        if (lastResultValue != null && resultEqualityCheck(lastResultValue, result)) {\n          result = lastResultValue;\n          if (resultsCount !== 0) {\n            resultsCount -= 1;\n          }\n        }\n        const needsWeakRef = typeof result === 'object' && result !== null || typeof result === 'function';\n        lastResult = needsWeakRef ? /** @__PURE__ */new Ref(result) : result;\n      }\n    }\n    terminatedNode.s = TERMINATED;\n    terminatedNode.v = result;\n    return result;\n  }\n  memoized.clearCache = () => {\n    fnNode = createCacheNode();\n    memoized.resetResultsCount();\n  };\n  memoized.resultsCount = () => resultsCount;\n  memoized.resetResultsCount = () => {\n    resultsCount = 0;\n  };\n  return memoized;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}