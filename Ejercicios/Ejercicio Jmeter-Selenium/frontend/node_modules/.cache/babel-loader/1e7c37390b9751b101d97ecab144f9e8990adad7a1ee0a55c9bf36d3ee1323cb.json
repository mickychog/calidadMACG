{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"render\", \"className\", \"onClick\", \"onPointerUp\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useId from '@mui/utils/useId';\nimport { forwardRef } from '@mui/x-internals/forwardRef';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { useGridPanelContext } from \"../panel/GridPanelContext.js\";\nimport { useGridApiContext } from \"../../hooks/utils/useGridApiContext.js\";\nimport { gridPreferencePanelStateSelector, GridPreferencePanelsValue, useGridSelector } from \"../../hooks/index.js\";\nimport { useGridRootProps } from \"../../hooks/utils/useGridRootProps.js\";\nimport { useGridComponentRenderer } from \"../../hooks/utils/useGridComponentRenderer.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * A button that opens and closes the columns panel.\n * It renders the `baseButton` slot.\n *\n * Demos:\n *\n * - [Columns Panel](https://mui.com/x/react-data-grid/components/columns-panel/)\n *\n * API:\n *\n * - [ColumnsPanelTrigger API](https://mui.com/x/api/data-grid/columns-panel-trigger/)\n */\nconst ColumnsPanelTrigger = forwardRef(function ColumnsPanelTrigger(props, ref) {\n  const {\n      render,\n      className,\n      onClick,\n      onPointerUp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const rootProps = useGridRootProps();\n  const buttonId = useId();\n  const panelId = useId();\n  const apiRef = useGridApiContext();\n  const panelState = useGridSelector(apiRef, gridPreferencePanelStateSelector);\n  const open = panelState.open && panelState.openedPanelValue === GridPreferencePanelsValue.columns;\n  const state = {\n    open\n  };\n  const resolvedClassName = typeof className === 'function' ? className(state) : className;\n  const {\n    columnsPanelTriggerRef\n  } = useGridPanelContext();\n  const handleRef = useForkRef(ref, columnsPanelTriggerRef);\n  const handleClick = event => {\n    if (open) {\n      apiRef.current.hidePreferences();\n    } else {\n      apiRef.current.showPreferences(GridPreferencePanelsValue.columns, panelId, buttonId);\n    }\n    onClick?.(event);\n  };\n  const handlePointerUp = event => {\n    if (open) {\n      event.stopPropagation();\n    }\n    onPointerUp?.(event);\n  };\n  const element = useGridComponentRenderer(rootProps.slots.baseButton, render, _extends({}, rootProps.slotProps?.baseButton, {\n    id: buttonId,\n    'aria-haspopup': 'true',\n    'aria-expanded': open ? 'true' : undefined,\n    'aria-controls': open ? panelId : undefined,\n    className: resolvedClassName\n  }, other, {\n    onPointerUp: handlePointerUp,\n    onClick: handleClick,\n    ref: handleRef\n  }), state);\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: element\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? ColumnsPanelTrigger.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  disabled: PropTypes.bool,\n  id: PropTypes.string,\n  /**\n   * A function to customize rendering of the component.\n   */\n  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  role: PropTypes.string,\n  size: PropTypes.oneOf(['large', 'medium', 'small']),\n  startIcon: PropTypes.node,\n  style: PropTypes.object,\n  tabIndex: PropTypes.number,\n  title: PropTypes.string,\n  touchRippleRef: PropTypes.any\n} : void 0;\nexport { ColumnsPanelTrigger };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useId","forwardRef","useForkRef","useGridPanelContext","useGridApiContext","gridPreferencePanelStateSelector","GridPreferencePanelsValue","useGridSelector","useGridRootProps","useGridComponentRenderer","jsx","_jsx","ColumnsPanelTrigger","props","ref","render","className","onClick","onPointerUp","other","rootProps","buttonId","panelId","apiRef","panelState","open","openedPanelValue","columns","state","resolvedClassName","columnsPanelTriggerRef","handleRef","handleClick","event","current","hidePreferences","showPreferences","handlePointerUp","stopPropagation","element","slots","baseButton","slotProps","id","undefined","Fragment","children","process","env","NODE_ENV","propTypes","oneOfType","func","string","disabled","bool","role","size","oneOf","startIcon","node","style","object","tabIndex","number","title","touchRippleRef","any"],"sources":["D:/2025/Calidad de Software/calidadMACG/Ejercicios/Ejercicio Jmeter-Selenium/frontend/node_modules/@mui/x-data-grid/esm/components/columnsPanel/ColumnsPanelTrigger.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"render\", \"className\", \"onClick\", \"onPointerUp\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useId from '@mui/utils/useId';\nimport { forwardRef } from '@mui/x-internals/forwardRef';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { useGridPanelContext } from \"../panel/GridPanelContext.js\";\nimport { useGridApiContext } from \"../../hooks/utils/useGridApiContext.js\";\nimport { gridPreferencePanelStateSelector, GridPreferencePanelsValue, useGridSelector } from \"../../hooks/index.js\";\nimport { useGridRootProps } from \"../../hooks/utils/useGridRootProps.js\";\nimport { useGridComponentRenderer } from \"../../hooks/utils/useGridComponentRenderer.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * A button that opens and closes the columns panel.\n * It renders the `baseButton` slot.\n *\n * Demos:\n *\n * - [Columns Panel](https://mui.com/x/react-data-grid/components/columns-panel/)\n *\n * API:\n *\n * - [ColumnsPanelTrigger API](https://mui.com/x/api/data-grid/columns-panel-trigger/)\n */\nconst ColumnsPanelTrigger = forwardRef(function ColumnsPanelTrigger(props, ref) {\n  const {\n      render,\n      className,\n      onClick,\n      onPointerUp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const rootProps = useGridRootProps();\n  const buttonId = useId();\n  const panelId = useId();\n  const apiRef = useGridApiContext();\n  const panelState = useGridSelector(apiRef, gridPreferencePanelStateSelector);\n  const open = panelState.open && panelState.openedPanelValue === GridPreferencePanelsValue.columns;\n  const state = {\n    open\n  };\n  const resolvedClassName = typeof className === 'function' ? className(state) : className;\n  const {\n    columnsPanelTriggerRef\n  } = useGridPanelContext();\n  const handleRef = useForkRef(ref, columnsPanelTriggerRef);\n  const handleClick = event => {\n    if (open) {\n      apiRef.current.hidePreferences();\n    } else {\n      apiRef.current.showPreferences(GridPreferencePanelsValue.columns, panelId, buttonId);\n    }\n    onClick?.(event);\n  };\n  const handlePointerUp = event => {\n    if (open) {\n      event.stopPropagation();\n    }\n    onPointerUp?.(event);\n  };\n  const element = useGridComponentRenderer(rootProps.slots.baseButton, render, _extends({}, rootProps.slotProps?.baseButton, {\n    id: buttonId,\n    'aria-haspopup': 'true',\n    'aria-expanded': open ? 'true' : undefined,\n    'aria-controls': open ? panelId : undefined,\n    className: resolvedClassName\n  }, other, {\n    onPointerUp: handlePointerUp,\n    onClick: handleClick,\n    ref: handleRef\n  }), state);\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: element\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? ColumnsPanelTrigger.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  disabled: PropTypes.bool,\n  id: PropTypes.string,\n  /**\n   * A function to customize rendering of the component.\n   */\n  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  role: PropTypes.string,\n  size: PropTypes.oneOf(['large', 'medium', 'small']),\n  startIcon: PropTypes.node,\n  style: PropTypes.object,\n  tabIndex: PropTypes.number,\n  title: PropTypes.string,\n  touchRippleRef: PropTypes.any\n} : void 0;\nexport { ColumnsPanelTrigger };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}