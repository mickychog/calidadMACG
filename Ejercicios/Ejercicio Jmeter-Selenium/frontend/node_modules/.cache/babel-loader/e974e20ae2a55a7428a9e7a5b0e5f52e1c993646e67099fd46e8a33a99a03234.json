{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport { unstable_debounce as debounce } from '@mui/utils';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { isDeepEqual } from '@mui/x-internals/isDeepEqual';\nimport { GRID_ROOT_GROUP_ID } from \"../rows/gridRowsUtils.js\";\nimport { runIf } from \"../../../utils/utils.js\";\nimport { GridStrategyGroup } from \"../../core/strategyProcessing/index.js\";\nimport { useGridSelector } from \"../../utils/useGridSelector.js\";\nimport { gridPaginationModelSelector } from \"../pagination/gridPaginationSelector.js\";\nimport { gridGetRowsParamsSelector } from \"./gridDataSourceSelector.js\";\nimport { CacheChunkManager, DataSourceRowsUpdateStrategy } from \"./utils.js\";\nimport { GridDataSourceCacheDefault } from \"./cache.js\";\nimport { GridGetRowsError, GridUpdateRowError } from \"./gridDataSourceError.js\";\nconst noopCache = {\n  clear: () => {},\n  get: () => undefined,\n  set: () => {}\n};\nfunction getCache(cacheProp, options = {}) {\n  if (cacheProp === null) {\n    return noopCache;\n  }\n  return cacheProp ?? new GridDataSourceCacheDefault(options);\n}\nexport const useGridDataSourceBase = (apiRef, props, options = {}) => {\n  const setStrategyAvailability = React.useCallback(() => {\n    apiRef.current.setStrategyAvailability(GridStrategyGroup.DataSource, DataSourceRowsUpdateStrategy.Default, props.dataSource ? () => true : () => false);\n  }, [apiRef, props.dataSource]);\n  const [defaultRowsUpdateStrategyActive, setDefaultRowsUpdateStrategyActive] = React.useState(false);\n  const paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);\n  const lastRequestId = React.useRef(0);\n  const onDataSourceErrorProp = props.onDataSourceError;\n  const cacheChunkManager = useLazyRef(() => {\n    const sortedPageSizeOptions = props.pageSizeOptions.map(option => typeof option === 'number' ? option : option.value).sort((a, b) => a - b);\n    const cacheChunkSize = Math.min(paginationModel.pageSize, sortedPageSizeOptions[0]);\n    return new CacheChunkManager(cacheChunkSize);\n  }).current;\n  const [cache, setCache] = React.useState(() => getCache(props.dataSourceCache, options.cacheOptions));\n  const fetchRows = React.useCallback(async (parentId, params) => {\n    const getRows = props.dataSource?.getRows;\n    if (!getRows) {\n      return;\n    }\n    if (parentId && parentId !== GRID_ROOT_GROUP_ID && props.signature !== 'DataGrid') {\n      options.fetchRowChildren?.([parentId]);\n      return;\n    }\n    options.clearDataSourceState?.();\n    const fetchParams = _extends({}, gridGetRowsParamsSelector(apiRef), apiRef.current.unstable_applyPipeProcessors('getRowsParams', {}), params);\n    const cacheKeys = cacheChunkManager.getCacheKeys(fetchParams);\n    const responses = cacheKeys.map(cacheKey => cache.get(cacheKey));\n    if (responses.every(response => response !== undefined)) {\n      apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n        response: CacheChunkManager.mergeResponses(responses),\n        fetchParams\n      });\n      return;\n    }\n\n    // Manage loading state only for the default strategy\n    if (defaultRowsUpdateStrategyActive || apiRef.current.getRowsCount() === 0) {\n      apiRef.current.setLoading(true);\n    }\n    const requestId = lastRequestId.current + 1;\n    lastRequestId.current = requestId;\n    try {\n      const getRowsResponse = await getRows(fetchParams);\n      const cacheResponses = cacheChunkManager.splitResponse(fetchParams, getRowsResponse);\n      cacheResponses.forEach((response, key) => cache.set(key, response));\n      if (lastRequestId.current === requestId) {\n        apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n          response: getRowsResponse,\n          fetchParams\n        });\n      }\n    } catch (originalError) {\n      if (lastRequestId.current === requestId) {\n        apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n          error: originalError,\n          fetchParams\n        });\n        if (typeof onDataSourceErrorProp === 'function') {\n          onDataSourceErrorProp(new GridGetRowsError({\n            message: originalError?.message,\n            params: fetchParams,\n            cause: originalError\n          }));\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(['MUI X: A call to `dataSource.getRows()` threw an error which was not handled because `onDataSourceError()` is missing.', 'To handle the error pass a callback to the `onDataSourceError` prop, for example `<DataGrid onDataSourceError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/server-side-data/#error-handling.'], 'error');\n        }\n      }\n    } finally {\n      if (defaultRowsUpdateStrategyActive && lastRequestId.current === requestId) {\n        apiRef.current.setLoading(false);\n      }\n    }\n  }, [cacheChunkManager, cache, apiRef, defaultRowsUpdateStrategyActive, props.dataSource?.getRows, onDataSourceErrorProp, options, props.signature]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    setDefaultRowsUpdateStrategyActive(apiRef.current.getActiveStrategy(GridStrategyGroup.DataSource) === DataSourceRowsUpdateStrategy.Default);\n  }, [apiRef]);\n  const handleDataUpdate = React.useCallback(params => {\n    if ('error' in params) {\n      apiRef.current.setRows([]);\n      return;\n    }\n    const {\n      response\n    } = params;\n    if (response.rowCount !== undefined) {\n      apiRef.current.setRowCount(response.rowCount);\n    }\n    apiRef.current.setRows(response.rows);\n    apiRef.current.unstable_applyPipeProcessors('processDataSourceRows', {\n      params: params.fetchParams,\n      response\n    }, true);\n  }, [apiRef]);\n  const dataSourceUpdateRow = props.dataSource?.updateRow;\n  const handleEditRowOption = options.handleEditRow;\n  const editRow = React.useCallback(async params => {\n    if (!dataSourceUpdateRow) {\n      return undefined;\n    }\n    try {\n      const finalRowUpdate = await dataSourceUpdateRow(params);\n      if (typeof handleEditRowOption === 'function') {\n        handleEditRowOption(params, finalRowUpdate);\n        return finalRowUpdate;\n      }\n      apiRef.current.updateNestedRows([finalRowUpdate], []);\n      if (finalRowUpdate && !isDeepEqual(finalRowUpdate, params.previousRow)) {\n        // Reset the outdated cache, only if the row is _actually_ updated\n        apiRef.current.dataSource.cache.clear();\n      }\n      return finalRowUpdate;\n    } catch (errorThrown) {\n      if (typeof onDataSourceErrorProp === 'function') {\n        onDataSourceErrorProp(new GridUpdateRowError({\n          message: errorThrown?.message,\n          params,\n          cause: errorThrown\n        }));\n      } else if (process.env.NODE_ENV !== 'production') {\n        warnOnce(['MUI X: A call to `dataSource.updateRow()` threw an error which was not handled because `onDataSourceError()` is missing.', 'To handle the error pass a callback to the `onDataSourceError` prop, for example `<DataGrid onDataSourceError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/server-side-data/#error-handling.'], 'error');\n      }\n      throw errorThrown; // Let the caller handle the error further\n    }\n  }, [apiRef, dataSourceUpdateRow, onDataSourceErrorProp, handleEditRowOption]);\n  const dataSourceApi = {\n    dataSource: {\n      fetchRows,\n      cache,\n      editRow\n    }\n  };\n  const debouncedFetchRows = React.useMemo(() => debounce(fetchRows, 0), [fetchRows]);\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    if (props.dataSourceCache === undefined) {\n      return;\n    }\n    const newCache = getCache(props.dataSourceCache, options.cacheOptions);\n    setCache(prevCache => prevCache !== newCache ? newCache : prevCache);\n  }, [props.dataSourceCache, options.cacheOptions]);\n  React.useEffect(() => {\n    if (props.dataSource) {\n      apiRef.current.dataSource.cache.clear();\n      apiRef.current.dataSource.fetchRows();\n    }\n  }, [apiRef, props.dataSource]);\n  return {\n    api: {\n      public: dataSourceApi\n    },\n    debouncedFetchRows,\n    strategyProcessor: {\n      strategyName: DataSourceRowsUpdateStrategy.Default,\n      group: 'dataSourceRowsUpdate',\n      processor: handleDataUpdate\n    },\n    setStrategyAvailability,\n    cacheChunkManager,\n    cache,\n    events: {\n      strategyAvailabilityChange: handleStrategyActivityChange,\n      sortModelChange: runIf(defaultRowsUpdateStrategyActive, () => debouncedFetchRows()),\n      filterModelChange: runIf(defaultRowsUpdateStrategyActive, () => debouncedFetchRows()),\n      paginationModelChange: runIf(defaultRowsUpdateStrategyActive, () => debouncedFetchRows())\n    }\n  };\n};","map":{"version":3,"names":["_extends","React","useLazyRef","unstable_debounce","debounce","warnOnce","isDeepEqual","GRID_ROOT_GROUP_ID","runIf","GridStrategyGroup","useGridSelector","gridPaginationModelSelector","gridGetRowsParamsSelector","CacheChunkManager","DataSourceRowsUpdateStrategy","GridDataSourceCacheDefault","GridGetRowsError","GridUpdateRowError","noopCache","clear","get","undefined","set","getCache","cacheProp","options","useGridDataSourceBase","apiRef","props","setStrategyAvailability","useCallback","current","DataSource","Default","dataSource","defaultRowsUpdateStrategyActive","setDefaultRowsUpdateStrategyActive","useState","paginationModel","lastRequestId","useRef","onDataSourceErrorProp","onDataSourceError","cacheChunkManager","sortedPageSizeOptions","pageSizeOptions","map","option","value","sort","a","b","cacheChunkSize","Math","min","pageSize","cache","setCache","dataSourceCache","cacheOptions","fetchRows","parentId","params","getRows","signature","fetchRowChildren","clearDataSourceState","fetchParams","unstable_applyPipeProcessors","cacheKeys","getCacheKeys","responses","cacheKey","every","response","applyStrategyProcessor","mergeResponses","getRowsCount","setLoading","requestId","getRowsResponse","cacheResponses","splitResponse","forEach","key","originalError","error","message","cause","process","env","NODE_ENV","handleStrategyActivityChange","getActiveStrategy","handleDataUpdate","setRows","rowCount","setRowCount","rows","dataSourceUpdateRow","updateRow","handleEditRowOption","handleEditRow","editRow","finalRowUpdate","updateNestedRows","previousRow","errorThrown","dataSourceApi","debouncedFetchRows","useMemo","isFirstRender","useEffect","newCache","prevCache","api","public","strategyProcessor","strategyName","group","processor","events","strategyAvailabilityChange","sortModelChange","filterModelChange","paginationModelChange"],"sources":["D:/2025/Calidad de Software/calidadMACG/Ejercicios/Ejercicio Jmeter-Selenium/frontend/node_modules/@mui/x-data-grid/esm/hooks/features/dataSource/useGridDataSourceBase.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport { unstable_debounce as debounce } from '@mui/utils';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { isDeepEqual } from '@mui/x-internals/isDeepEqual';\nimport { GRID_ROOT_GROUP_ID } from \"../rows/gridRowsUtils.js\";\nimport { runIf } from \"../../../utils/utils.js\";\nimport { GridStrategyGroup } from \"../../core/strategyProcessing/index.js\";\nimport { useGridSelector } from \"../../utils/useGridSelector.js\";\nimport { gridPaginationModelSelector } from \"../pagination/gridPaginationSelector.js\";\nimport { gridGetRowsParamsSelector } from \"./gridDataSourceSelector.js\";\nimport { CacheChunkManager, DataSourceRowsUpdateStrategy } from \"./utils.js\";\nimport { GridDataSourceCacheDefault } from \"./cache.js\";\nimport { GridGetRowsError, GridUpdateRowError } from \"./gridDataSourceError.js\";\nconst noopCache = {\n  clear: () => {},\n  get: () => undefined,\n  set: () => {}\n};\nfunction getCache(cacheProp, options = {}) {\n  if (cacheProp === null) {\n    return noopCache;\n  }\n  return cacheProp ?? new GridDataSourceCacheDefault(options);\n}\nexport const useGridDataSourceBase = (apiRef, props, options = {}) => {\n  const setStrategyAvailability = React.useCallback(() => {\n    apiRef.current.setStrategyAvailability(GridStrategyGroup.DataSource, DataSourceRowsUpdateStrategy.Default, props.dataSource ? () => true : () => false);\n  }, [apiRef, props.dataSource]);\n  const [defaultRowsUpdateStrategyActive, setDefaultRowsUpdateStrategyActive] = React.useState(false);\n  const paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);\n  const lastRequestId = React.useRef(0);\n  const onDataSourceErrorProp = props.onDataSourceError;\n  const cacheChunkManager = useLazyRef(() => {\n    const sortedPageSizeOptions = props.pageSizeOptions.map(option => typeof option === 'number' ? option : option.value).sort((a, b) => a - b);\n    const cacheChunkSize = Math.min(paginationModel.pageSize, sortedPageSizeOptions[0]);\n    return new CacheChunkManager(cacheChunkSize);\n  }).current;\n  const [cache, setCache] = React.useState(() => getCache(props.dataSourceCache, options.cacheOptions));\n  const fetchRows = React.useCallback(async (parentId, params) => {\n    const getRows = props.dataSource?.getRows;\n    if (!getRows) {\n      return;\n    }\n    if (parentId && parentId !== GRID_ROOT_GROUP_ID && props.signature !== 'DataGrid') {\n      options.fetchRowChildren?.([parentId]);\n      return;\n    }\n    options.clearDataSourceState?.();\n    const fetchParams = _extends({}, gridGetRowsParamsSelector(apiRef), apiRef.current.unstable_applyPipeProcessors('getRowsParams', {}), params);\n    const cacheKeys = cacheChunkManager.getCacheKeys(fetchParams);\n    const responses = cacheKeys.map(cacheKey => cache.get(cacheKey));\n    if (responses.every(response => response !== undefined)) {\n      apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n        response: CacheChunkManager.mergeResponses(responses),\n        fetchParams\n      });\n      return;\n    }\n\n    // Manage loading state only for the default strategy\n    if (defaultRowsUpdateStrategyActive || apiRef.current.getRowsCount() === 0) {\n      apiRef.current.setLoading(true);\n    }\n    const requestId = lastRequestId.current + 1;\n    lastRequestId.current = requestId;\n    try {\n      const getRowsResponse = await getRows(fetchParams);\n      const cacheResponses = cacheChunkManager.splitResponse(fetchParams, getRowsResponse);\n      cacheResponses.forEach((response, key) => cache.set(key, response));\n      if (lastRequestId.current === requestId) {\n        apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n          response: getRowsResponse,\n          fetchParams\n        });\n      }\n    } catch (originalError) {\n      if (lastRequestId.current === requestId) {\n        apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n          error: originalError,\n          fetchParams\n        });\n        if (typeof onDataSourceErrorProp === 'function') {\n          onDataSourceErrorProp(new GridGetRowsError({\n            message: originalError?.message,\n            params: fetchParams,\n            cause: originalError\n          }));\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(['MUI X: A call to `dataSource.getRows()` threw an error which was not handled because `onDataSourceError()` is missing.', 'To handle the error pass a callback to the `onDataSourceError` prop, for example `<DataGrid onDataSourceError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/server-side-data/#error-handling.'], 'error');\n        }\n      }\n    } finally {\n      if (defaultRowsUpdateStrategyActive && lastRequestId.current === requestId) {\n        apiRef.current.setLoading(false);\n      }\n    }\n  }, [cacheChunkManager, cache, apiRef, defaultRowsUpdateStrategyActive, props.dataSource?.getRows, onDataSourceErrorProp, options, props.signature]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    setDefaultRowsUpdateStrategyActive(apiRef.current.getActiveStrategy(GridStrategyGroup.DataSource) === DataSourceRowsUpdateStrategy.Default);\n  }, [apiRef]);\n  const handleDataUpdate = React.useCallback(params => {\n    if ('error' in params) {\n      apiRef.current.setRows([]);\n      return;\n    }\n    const {\n      response\n    } = params;\n    if (response.rowCount !== undefined) {\n      apiRef.current.setRowCount(response.rowCount);\n    }\n    apiRef.current.setRows(response.rows);\n    apiRef.current.unstable_applyPipeProcessors('processDataSourceRows', {\n      params: params.fetchParams,\n      response\n    }, true);\n  }, [apiRef]);\n  const dataSourceUpdateRow = props.dataSource?.updateRow;\n  const handleEditRowOption = options.handleEditRow;\n  const editRow = React.useCallback(async params => {\n    if (!dataSourceUpdateRow) {\n      return undefined;\n    }\n    try {\n      const finalRowUpdate = await dataSourceUpdateRow(params);\n      if (typeof handleEditRowOption === 'function') {\n        handleEditRowOption(params, finalRowUpdate);\n        return finalRowUpdate;\n      }\n      apiRef.current.updateNestedRows([finalRowUpdate], []);\n      if (finalRowUpdate && !isDeepEqual(finalRowUpdate, params.previousRow)) {\n        // Reset the outdated cache, only if the row is _actually_ updated\n        apiRef.current.dataSource.cache.clear();\n      }\n      return finalRowUpdate;\n    } catch (errorThrown) {\n      if (typeof onDataSourceErrorProp === 'function') {\n        onDataSourceErrorProp(new GridUpdateRowError({\n          message: errorThrown?.message,\n          params,\n          cause: errorThrown\n        }));\n      } else if (process.env.NODE_ENV !== 'production') {\n        warnOnce(['MUI X: A call to `dataSource.updateRow()` threw an error which was not handled because `onDataSourceError()` is missing.', 'To handle the error pass a callback to the `onDataSourceError` prop, for example `<DataGrid onDataSourceError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/server-side-data/#error-handling.'], 'error');\n      }\n      throw errorThrown; // Let the caller handle the error further\n    }\n  }, [apiRef, dataSourceUpdateRow, onDataSourceErrorProp, handleEditRowOption]);\n  const dataSourceApi = {\n    dataSource: {\n      fetchRows,\n      cache,\n      editRow\n    }\n  };\n  const debouncedFetchRows = React.useMemo(() => debounce(fetchRows, 0), [fetchRows]);\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    if (props.dataSourceCache === undefined) {\n      return;\n    }\n    const newCache = getCache(props.dataSourceCache, options.cacheOptions);\n    setCache(prevCache => prevCache !== newCache ? newCache : prevCache);\n  }, [props.dataSourceCache, options.cacheOptions]);\n  React.useEffect(() => {\n    if (props.dataSource) {\n      apiRef.current.dataSource.cache.clear();\n      apiRef.current.dataSource.fetchRows();\n    }\n  }, [apiRef, props.dataSource]);\n  return {\n    api: {\n      public: dataSourceApi\n    },\n    debouncedFetchRows,\n    strategyProcessor: {\n      strategyName: DataSourceRowsUpdateStrategy.Default,\n      group: 'dataSourceRowsUpdate',\n      processor: handleDataUpdate\n    },\n    setStrategyAvailability,\n    cacheChunkManager,\n    cache,\n    events: {\n      strategyAvailabilityChange: handleStrategyActivityChange,\n      sortModelChange: runIf(defaultRowsUpdateStrategyActive, () => debouncedFetchRows()),\n      filterModelChange: runIf(defaultRowsUpdateStrategyActive, () => debouncedFetchRows()),\n      paginationModelChange: runIf(defaultRowsUpdateStrategyActive, () => debouncedFetchRows())\n    }\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}