{"ast":null,"code":"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { NotRendered } from \"../utils/assert.js\";\nimport { useGridSelector } from \"../hooks/utils/useGridSelector.js\";\nimport { useGridApiContext } from \"../hooks/utils/useGridApiContext.js\";\nimport { useGridRootProps } from \"../hooks/utils/useGridRootProps.js\";\nimport { gridPaginationModelSelector, gridPaginationRowCountSelector, gridPageCountSelector } from \"../hooks/features/pagination/gridPaginationSelector.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst GridPaginationRoot = styled(NotRendered)({\n  maxHeight: 'calc(100% + 1px)',\n  // border width\n  flexGrow: 1\n});\nfunction GridPagination() {\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);\n  const rowCount = useGridSelector(apiRef, gridPaginationRowCountSelector);\n  const pageCount = useGridSelector(apiRef, gridPageCountSelector);\n  const {\n    paginationMode,\n    loading\n  } = rootProps;\n  const disabled = rowCount === -1 && paginationMode === 'server' && loading;\n  const lastPage = React.useMemo(() => Math.max(0, pageCount - 1), [pageCount]);\n  const computedPage = React.useMemo(() => {\n    if (rowCount === -1) {\n      return paginationModel.page;\n    }\n    return paginationModel.page <= lastPage ? paginationModel.page : lastPage;\n  }, [lastPage, paginationModel.page, rowCount]);\n  const handlePageSizeChange = React.useCallback(pageSize => {\n    apiRef.current.setPageSize(pageSize);\n  }, [apiRef]);\n  const handlePageChange = React.useCallback((_, page) => {\n    apiRef.current.setPage(page);\n  }, [apiRef]);\n  const isPageSizeIncludedInPageSizeOptions = pageSize => {\n    for (let i = 0; i < rootProps.pageSizeOptions.length; i += 1) {\n      const option = rootProps.pageSizeOptions[i];\n      if (typeof option === 'number') {\n        if (option === pageSize) {\n          return true;\n        }\n      } else if (option.value === pageSize) {\n        return true;\n      }\n    }\n    return false;\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const warnedOnceMissingInPageSizeOptions = React.useRef(false);\n    const pageSize = rootProps.paginationModel?.pageSize ?? paginationModel.pageSize;\n    if (!warnedOnceMissingInPageSizeOptions.current && !rootProps.autoPageSize && !isPageSizeIncludedInPageSizeOptions(pageSize)) {\n      console.warn([`MUI X: The page size \\`${paginationModel.pageSize}\\` is not present in the \\`pageSizeOptions\\`.`, `Add it to show the pagination select.`].join('\\n'));\n      warnedOnceMissingInPageSizeOptions.current = true;\n    }\n  }\n  const pageSizeOptions = isPageSizeIncludedInPageSizeOptions(paginationModel.pageSize) ? rootProps.pageSizeOptions : [];\n  return /*#__PURE__*/_jsx(GridPaginationRoot, {\n    as: rootProps.slots.basePagination,\n    count: rowCount,\n    page: computedPage,\n    rowsPerPageOptions: pageSizeOptions,\n    rowsPerPage: paginationModel.pageSize,\n    onPageChange: handlePageChange,\n    onRowsPerPageChange: handlePageSizeChange,\n    disabled: disabled\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? GridPagination.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  component: PropTypes.elementType\n} : void 0;\nexport { GridPagination };","map":{"version":3,"names":["React","styled","PropTypes","NotRendered","useGridSelector","useGridApiContext","useGridRootProps","gridPaginationModelSelector","gridPaginationRowCountSelector","gridPageCountSelector","jsx","_jsx","GridPaginationRoot","maxHeight","flexGrow","GridPagination","apiRef","rootProps","paginationModel","rowCount","pageCount","paginationMode","loading","disabled","lastPage","useMemo","Math","max","computedPage","page","handlePageSizeChange","useCallback","pageSize","current","setPageSize","handlePageChange","_","setPage","isPageSizeIncludedInPageSizeOptions","i","pageSizeOptions","length","option","value","process","env","NODE_ENV","warnedOnceMissingInPageSizeOptions","useRef","autoPageSize","console","warn","join","as","slots","basePagination","count","rowsPerPageOptions","rowsPerPage","onPageChange","onRowsPerPageChange","propTypes","component","elementType"],"sources":["D:/2025/Calidad de Software/calidadMACG/Ejercicios/Ejercicio Jmeter-Selenium/frontend/node_modules/@mui/x-data-grid/esm/components/GridPagination.js"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { NotRendered } from \"../utils/assert.js\";\nimport { useGridSelector } from \"../hooks/utils/useGridSelector.js\";\nimport { useGridApiContext } from \"../hooks/utils/useGridApiContext.js\";\nimport { useGridRootProps } from \"../hooks/utils/useGridRootProps.js\";\nimport { gridPaginationModelSelector, gridPaginationRowCountSelector, gridPageCountSelector } from \"../hooks/features/pagination/gridPaginationSelector.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst GridPaginationRoot = styled(NotRendered)({\n  maxHeight: 'calc(100% + 1px)',\n  // border width\n  flexGrow: 1\n});\nfunction GridPagination() {\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);\n  const rowCount = useGridSelector(apiRef, gridPaginationRowCountSelector);\n  const pageCount = useGridSelector(apiRef, gridPageCountSelector);\n  const {\n    paginationMode,\n    loading\n  } = rootProps;\n  const disabled = rowCount === -1 && paginationMode === 'server' && loading;\n  const lastPage = React.useMemo(() => Math.max(0, pageCount - 1), [pageCount]);\n  const computedPage = React.useMemo(() => {\n    if (rowCount === -1) {\n      return paginationModel.page;\n    }\n    return paginationModel.page <= lastPage ? paginationModel.page : lastPage;\n  }, [lastPage, paginationModel.page, rowCount]);\n  const handlePageSizeChange = React.useCallback(pageSize => {\n    apiRef.current.setPageSize(pageSize);\n  }, [apiRef]);\n  const handlePageChange = React.useCallback((_, page) => {\n    apiRef.current.setPage(page);\n  }, [apiRef]);\n  const isPageSizeIncludedInPageSizeOptions = pageSize => {\n    for (let i = 0; i < rootProps.pageSizeOptions.length; i += 1) {\n      const option = rootProps.pageSizeOptions[i];\n      if (typeof option === 'number') {\n        if (option === pageSize) {\n          return true;\n        }\n      } else if (option.value === pageSize) {\n        return true;\n      }\n    }\n    return false;\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const warnedOnceMissingInPageSizeOptions = React.useRef(false);\n    const pageSize = rootProps.paginationModel?.pageSize ?? paginationModel.pageSize;\n    if (!warnedOnceMissingInPageSizeOptions.current && !rootProps.autoPageSize && !isPageSizeIncludedInPageSizeOptions(pageSize)) {\n      console.warn([`MUI X: The page size \\`${paginationModel.pageSize}\\` is not present in the \\`pageSizeOptions\\`.`, `Add it to show the pagination select.`].join('\\n'));\n      warnedOnceMissingInPageSizeOptions.current = true;\n    }\n  }\n  const pageSizeOptions = isPageSizeIncludedInPageSizeOptions(paginationModel.pageSize) ? rootProps.pageSizeOptions : [];\n  return /*#__PURE__*/_jsx(GridPaginationRoot, {\n    as: rootProps.slots.basePagination,\n    count: rowCount,\n    page: computedPage,\n    rowsPerPageOptions: pageSizeOptions,\n    rowsPerPage: paginationModel.pageSize,\n    onPageChange: handlePageChange,\n    onRowsPerPageChange: handlePageSizeChange,\n    disabled: disabled\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? GridPagination.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  component: PropTypes.elementType\n} : void 0;\nexport { GridPagination };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}