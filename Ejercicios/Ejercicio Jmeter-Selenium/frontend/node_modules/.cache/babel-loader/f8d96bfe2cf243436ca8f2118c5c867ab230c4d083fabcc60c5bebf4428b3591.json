{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_STRING_COL_DEF } from \"./gridStringColDef.js\";\nimport { renderEditSingleSelectCell } from \"../components/cell/GridEditSingleSelectCell.js\";\nimport { getGridSingleSelectOperators } from \"./gridSingleSelectOperators.js\";\nimport { getValueOptions, isSingleSelectColDef } from \"../components/panel/filterPanel/filterPanelUtils.js\";\nimport { isObject } from \"../utils/utils.js\";\nimport { gridRowIdSelector } from \"../hooks/core/gridPropsSelectors.js\";\nconst isArrayOfObjects = options => {\n  return typeof options[0] === 'object';\n};\nconst defaultGetOptionValue = value => {\n  return isObject(value) ? value.value : value;\n};\nconst defaultGetOptionLabel = value => {\n  return isObject(value) ? value.label : String(value);\n};\nexport const GRID_SINGLE_SELECT_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {\n  type: 'singleSelect',\n  getOptionLabel: defaultGetOptionLabel,\n  getOptionValue: defaultGetOptionValue,\n  valueFormatter(value, row, colDef, apiRef) {\n    const rowId = gridRowIdSelector(apiRef, row);\n    if (!isSingleSelectColDef(colDef)) {\n      return '';\n    }\n    const valueOptions = getValueOptions(colDef, {\n      id: rowId,\n      row\n    });\n    if (value == null) {\n      return '';\n    }\n    if (!valueOptions) {\n      return value;\n    }\n    if (!isArrayOfObjects(valueOptions)) {\n      return colDef.getOptionLabel(value);\n    }\n    const valueOption = valueOptions.find(option => colDef.getOptionValue(option) === value);\n    return valueOption ? colDef.getOptionLabel(valueOption) : '';\n  },\n  renderEditCell: renderEditSingleSelectCell,\n  filterOperators: getGridSingleSelectOperators(),\n  // @ts-ignore\n  pastedValueParser: (value, row, column) => {\n    const colDef = column;\n    const valueOptions = getValueOptions(colDef) || [];\n    const getOptionValue = colDef.getOptionValue;\n    const valueOption = valueOptions.find(option => {\n      if (getOptionValue(option) === value) {\n        return true;\n      }\n      return false;\n    });\n    if (valueOption) {\n      return value;\n    }\n    // do not paste the value if it is not in the valueOptions\n    return undefined;\n  }\n});","map":{"version":3,"names":["_extends","GRID_STRING_COL_DEF","renderEditSingleSelectCell","getGridSingleSelectOperators","getValueOptions","isSingleSelectColDef","isObject","gridRowIdSelector","isArrayOfObjects","options","defaultGetOptionValue","value","defaultGetOptionLabel","label","String","GRID_SINGLE_SELECT_COL_DEF","type","getOptionLabel","getOptionValue","valueFormatter","row","colDef","apiRef","rowId","valueOptions","id","valueOption","find","option","renderEditCell","filterOperators","pastedValueParser","column","undefined"],"sources":["D:/2025/Calidad de Software/calidadMACG/Ejercicios/Ejercicio Jmeter-Selenium/frontend/node_modules/@mui/x-data-grid/esm/colDef/gridSingleSelectColDef.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GRID_STRING_COL_DEF } from \"./gridStringColDef.js\";\nimport { renderEditSingleSelectCell } from \"../components/cell/GridEditSingleSelectCell.js\";\nimport { getGridSingleSelectOperators } from \"./gridSingleSelectOperators.js\";\nimport { getValueOptions, isSingleSelectColDef } from \"../components/panel/filterPanel/filterPanelUtils.js\";\nimport { isObject } from \"../utils/utils.js\";\nimport { gridRowIdSelector } from \"../hooks/core/gridPropsSelectors.js\";\nconst isArrayOfObjects = options => {\n  return typeof options[0] === 'object';\n};\nconst defaultGetOptionValue = value => {\n  return isObject(value) ? value.value : value;\n};\nconst defaultGetOptionLabel = value => {\n  return isObject(value) ? value.label : String(value);\n};\nexport const GRID_SINGLE_SELECT_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {\n  type: 'singleSelect',\n  getOptionLabel: defaultGetOptionLabel,\n  getOptionValue: defaultGetOptionValue,\n  valueFormatter(value, row, colDef, apiRef) {\n    const rowId = gridRowIdSelector(apiRef, row);\n    if (!isSingleSelectColDef(colDef)) {\n      return '';\n    }\n    const valueOptions = getValueOptions(colDef, {\n      id: rowId,\n      row\n    });\n    if (value == null) {\n      return '';\n    }\n    if (!valueOptions) {\n      return value;\n    }\n    if (!isArrayOfObjects(valueOptions)) {\n      return colDef.getOptionLabel(value);\n    }\n    const valueOption = valueOptions.find(option => colDef.getOptionValue(option) === value);\n    return valueOption ? colDef.getOptionLabel(valueOption) : '';\n  },\n  renderEditCell: renderEditSingleSelectCell,\n  filterOperators: getGridSingleSelectOperators(),\n  // @ts-ignore\n  pastedValueParser: (value, row, column) => {\n    const colDef = column;\n    const valueOptions = getValueOptions(colDef) || [];\n    const getOptionValue = colDef.getOptionValue;\n    const valueOption = valueOptions.find(option => {\n      if (getOptionValue(option) === value) {\n        return true;\n      }\n      return false;\n    });\n    if (valueOption) {\n      return value;\n    }\n    // do not paste the value if it is not in the valueOptions\n    return undefined;\n  }\n});"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,0BAA0B,QAAQ,gDAAgD;AAC3F,SAASC,4BAA4B,QAAQ,gCAAgC;AAC7E,SAASC,eAAe,EAAEC,oBAAoB,QAAQ,qDAAqD;AAC3G,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,MAAMC,gBAAgB,GAAGC,OAAO,IAAI;EAClC,OAAO,OAAOA,OAAO,CAAC,CAAC,CAAC,KAAK,QAAQ;AACvC,CAAC;AACD,MAAMC,qBAAqB,GAAGC,KAAK,IAAI;EACrC,OAAOL,QAAQ,CAACK,KAAK,CAAC,GAAGA,KAAK,CAACA,KAAK,GAAGA,KAAK;AAC9C,CAAC;AACD,MAAMC,qBAAqB,GAAGD,KAAK,IAAI;EACrC,OAAOL,QAAQ,CAACK,KAAK,CAAC,GAAGA,KAAK,CAACE,KAAK,GAAGC,MAAM,CAACH,KAAK,CAAC;AACtD,CAAC;AACD,OAAO,MAAMI,0BAA0B,GAAGf,QAAQ,CAAC,CAAC,CAAC,EAAEC,mBAAmB,EAAE;EAC1Ee,IAAI,EAAE,cAAc;EACpBC,cAAc,EAAEL,qBAAqB;EACrCM,cAAc,EAAER,qBAAqB;EACrCS,cAAcA,CAACR,KAAK,EAAES,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAE;IACzC,MAAMC,KAAK,GAAGhB,iBAAiB,CAACe,MAAM,EAAEF,GAAG,CAAC;IAC5C,IAAI,CAACf,oBAAoB,CAACgB,MAAM,CAAC,EAAE;MACjC,OAAO,EAAE;IACX;IACA,MAAMG,YAAY,GAAGpB,eAAe,CAACiB,MAAM,EAAE;MAC3CI,EAAE,EAAEF,KAAK;MACTH;IACF,CAAC,CAAC;IACF,IAAIT,KAAK,IAAI,IAAI,EAAE;MACjB,OAAO,EAAE;IACX;IACA,IAAI,CAACa,YAAY,EAAE;MACjB,OAAOb,KAAK;IACd;IACA,IAAI,CAACH,gBAAgB,CAACgB,YAAY,CAAC,EAAE;MACnC,OAAOH,MAAM,CAACJ,cAAc,CAACN,KAAK,CAAC;IACrC;IACA,MAAMe,WAAW,GAAGF,YAAY,CAACG,IAAI,CAACC,MAAM,IAAIP,MAAM,CAACH,cAAc,CAACU,MAAM,CAAC,KAAKjB,KAAK,CAAC;IACxF,OAAOe,WAAW,GAAGL,MAAM,CAACJ,cAAc,CAACS,WAAW,CAAC,GAAG,EAAE;EAC9D,CAAC;EACDG,cAAc,EAAE3B,0BAA0B;EAC1C4B,eAAe,EAAE3B,4BAA4B,CAAC,CAAC;EAC/C;EACA4B,iBAAiB,EAAEA,CAACpB,KAAK,EAAES,GAAG,EAAEY,MAAM,KAAK;IACzC,MAAMX,MAAM,GAAGW,MAAM;IACrB,MAAMR,YAAY,GAAGpB,eAAe,CAACiB,MAAM,CAAC,IAAI,EAAE;IAClD,MAAMH,cAAc,GAAGG,MAAM,CAACH,cAAc;IAC5C,MAAMQ,WAAW,GAAGF,YAAY,CAACG,IAAI,CAACC,MAAM,IAAI;MAC9C,IAAIV,cAAc,CAACU,MAAM,CAAC,KAAKjB,KAAK,EAAE;QACpC,OAAO,IAAI;MACb;MACA,OAAO,KAAK;IACd,CAAC,CAAC;IACF,IAAIe,WAAW,EAAE;MACf,OAAOf,KAAK;IACd;IACA;IACA,OAAOsB,SAAS;EAClB;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}